
t7_MusicPlayer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005748  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  080058d0  080058d0  000068d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e18  08005e18  0000702c  2**0
                  CONTENTS
  4 .ARM          00000000  08005e18  08005e18  0000702c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e18  08005e18  0000702c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e18  08005e18  00006e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e1c  08005e1c  00006e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08005e20  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000702c  2**0
                  CONTENTS
 10 .bss          000004a8  2000002c  2000002c  0000702c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004d4  200004d4  0000702c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000702c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001791f  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cfe  00000000  00000000  0001e97b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001410  00000000  00000000  00021680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ff2  00000000  00000000  00022a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f592  00000000  00000000  00023a82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000196cc  00000000  00000000  00043014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bdef4  00000000  00000000  0005c6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011a5d4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005668  00000000  00000000  0011a618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0011fc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000002c 	.word	0x2000002c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080058b8 	.word	0x080058b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000030 	.word	0x20000030
 80001c4:	080058b8 	.word	0x080058b8

080001c8 <PWM_Start>:


//playing songs functions

void PWM_Start()
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(buzzer_pwm_timer, buzzer_pwm_channel);
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <PWM_Start+0x18>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a04      	ldr	r2, [pc, #16]	@ (80001e4 <PWM_Start+0x1c>)
 80001d2:	6812      	ldr	r2, [r2, #0]
 80001d4:	4611      	mov	r1, r2
 80001d6:	4618      	mov	r0, r3
 80001d8:	f003 fa0a 	bl	80035f0 <HAL_TIM_PWM_Start>
}
 80001dc:	bf00      	nop
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	20000014 	.word	0x20000014
 80001e4:	20000018 	.word	0x20000018

080001e8 <PWM_Change_Tone>:

void PWM_Change_Tone(uint16_t pwm_freq, uint16_t volume) // pwm_freq (1 - 20000), volume (0 - 1000)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b088      	sub	sp, #32
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	460a      	mov	r2, r1
 80001f2:	80fb      	strh	r3, [r7, #6]
 80001f4:	4613      	mov	r3, r2
 80001f6:	80bb      	strh	r3, [r7, #4]
    if (pwm_freq == 0 || pwm_freq > 20000)
 80001f8:	88fb      	ldrh	r3, [r7, #6]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d004      	beq.n	8000208 <PWM_Change_Tone+0x20>
 80001fe:	88fb      	ldrh	r3, [r7, #6]
 8000200:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000204:	4293      	cmp	r3, r2
 8000206:	d937      	bls.n	8000278 <PWM_Change_Tone+0x90>
    {
        __HAL_TIM_SET_COMPARE(buzzer_pwm_timer, buzzer_pwm_channel, 0);
 8000208:	4b4e      	ldr	r3, [pc, #312]	@ (8000344 <PWM_Change_Tone+0x15c>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d105      	bne.n	800021c <PWM_Change_Tone+0x34>
 8000210:	4b4d      	ldr	r3, [pc, #308]	@ (8000348 <PWM_Change_Tone+0x160>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	2200      	movs	r2, #0
 8000218:	635a      	str	r2, [r3, #52]	@ 0x34
 800021a:	e08e      	b.n	800033a <PWM_Change_Tone+0x152>
 800021c:	4b49      	ldr	r3, [pc, #292]	@ (8000344 <PWM_Change_Tone+0x15c>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	2b04      	cmp	r3, #4
 8000222:	d105      	bne.n	8000230 <PWM_Change_Tone+0x48>
 8000224:	4b48      	ldr	r3, [pc, #288]	@ (8000348 <PWM_Change_Tone+0x160>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	2300      	movs	r3, #0
 800022c:	6393      	str	r3, [r2, #56]	@ 0x38
 800022e:	e084      	b.n	800033a <PWM_Change_Tone+0x152>
 8000230:	4b44      	ldr	r3, [pc, #272]	@ (8000344 <PWM_Change_Tone+0x15c>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	2b08      	cmp	r3, #8
 8000236:	d105      	bne.n	8000244 <PWM_Change_Tone+0x5c>
 8000238:	4b43      	ldr	r3, [pc, #268]	@ (8000348 <PWM_Change_Tone+0x160>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	681a      	ldr	r2, [r3, #0]
 800023e:	2300      	movs	r3, #0
 8000240:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000242:	e07a      	b.n	800033a <PWM_Change_Tone+0x152>
 8000244:	4b3f      	ldr	r3, [pc, #252]	@ (8000344 <PWM_Change_Tone+0x15c>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	2b0c      	cmp	r3, #12
 800024a:	d105      	bne.n	8000258 <PWM_Change_Tone+0x70>
 800024c:	4b3e      	ldr	r3, [pc, #248]	@ (8000348 <PWM_Change_Tone+0x160>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	681a      	ldr	r2, [r3, #0]
 8000252:	2300      	movs	r3, #0
 8000254:	6413      	str	r3, [r2, #64]	@ 0x40
 8000256:	e070      	b.n	800033a <PWM_Change_Tone+0x152>
 8000258:	4b3a      	ldr	r3, [pc, #232]	@ (8000344 <PWM_Change_Tone+0x15c>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	2b10      	cmp	r3, #16
 800025e:	d105      	bne.n	800026c <PWM_Change_Tone+0x84>
 8000260:	4b39      	ldr	r3, [pc, #228]	@ (8000348 <PWM_Change_Tone+0x160>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	681a      	ldr	r2, [r3, #0]
 8000266:	2300      	movs	r3, #0
 8000268:	6593      	str	r3, [r2, #88]	@ 0x58
 800026a:	e066      	b.n	800033a <PWM_Change_Tone+0x152>
 800026c:	4b36      	ldr	r3, [pc, #216]	@ (8000348 <PWM_Change_Tone+0x160>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	681a      	ldr	r2, [r3, #0]
 8000272:	2300      	movs	r3, #0
 8000274:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000276:	e060      	b.n	800033a <PWM_Change_Tone+0x152>
    }
    else
    {
        const uint32_t internal_clock_freq = HAL_RCC_GetSysClockFreq();
 8000278:	f002 fd82 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 800027c:	61f8      	str	r0, [r7, #28]
        const uint16_t prescaler = 1;
 800027e:	2301      	movs	r3, #1
 8000280:	837b      	strh	r3, [r7, #26]
        const uint32_t timer_clock = internal_clock_freq / prescaler;
 8000282:	8b7b      	ldrh	r3, [r7, #26]
 8000284:	69fa      	ldr	r2, [r7, #28]
 8000286:	fbb2 f3f3 	udiv	r3, r2, r3
 800028a:	617b      	str	r3, [r7, #20]
        const uint32_t period_cycles = timer_clock / pwm_freq;
 800028c:	88fb      	ldrh	r3, [r7, #6]
 800028e:	697a      	ldr	r2, [r7, #20]
 8000290:	fbb2 f3f3 	udiv	r3, r2, r3
 8000294:	613b      	str	r3, [r7, #16]
        const uint32_t pulse_width = volume * period_cycles / 1000 / 2;
 8000296:	88bb      	ldrh	r3, [r7, #4]
 8000298:	693a      	ldr	r2, [r7, #16]
 800029a:	fb02 f303 	mul.w	r3, r2, r3
 800029e:	4a2b      	ldr	r2, [pc, #172]	@ (800034c <PWM_Change_Tone+0x164>)
 80002a0:	fba2 2303 	umull	r2, r3, r2, r3
 80002a4:	09db      	lsrs	r3, r3, #7
 80002a6:	60fb      	str	r3, [r7, #12]

        buzzer_pwm_timer->Instance->PSC = prescaler - 1;
 80002a8:	8b7b      	ldrh	r3, [r7, #26]
 80002aa:	1e5a      	subs	r2, r3, #1
 80002ac:	4b26      	ldr	r3, [pc, #152]	@ (8000348 <PWM_Change_Tone+0x160>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	629a      	str	r2, [r3, #40]	@ 0x28
        buzzer_pwm_timer->Instance->ARR = period_cycles - 1;
 80002b4:	4b24      	ldr	r3, [pc, #144]	@ (8000348 <PWM_Change_Tone+0x160>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	693a      	ldr	r2, [r7, #16]
 80002bc:	3a01      	subs	r2, #1
 80002be:	62da      	str	r2, [r3, #44]	@ 0x2c
        buzzer_pwm_timer->Instance->EGR = TIM_EGR_UG;
 80002c0:	4b21      	ldr	r3, [pc, #132]	@ (8000348 <PWM_Change_Tone+0x160>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	2201      	movs	r2, #1
 80002c8:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_COMPARE(buzzer_pwm_timer, buzzer_pwm_channel, pulse_width); // buzzer_pwm_timer->Instance->CCR2 = pulse_width;
 80002ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000344 <PWM_Change_Tone+0x15c>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d105      	bne.n	80002de <PWM_Change_Tone+0xf6>
 80002d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000348 <PWM_Change_Tone+0x160>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	68fa      	ldr	r2, [r7, #12]
 80002da:	635a      	str	r2, [r3, #52]	@ 0x34
    }
}
 80002dc:	e02d      	b.n	800033a <PWM_Change_Tone+0x152>
        __HAL_TIM_SET_COMPARE(buzzer_pwm_timer, buzzer_pwm_channel, pulse_width); // buzzer_pwm_timer->Instance->CCR2 = pulse_width;
 80002de:	4b19      	ldr	r3, [pc, #100]	@ (8000344 <PWM_Change_Tone+0x15c>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	2b04      	cmp	r3, #4
 80002e4:	d105      	bne.n	80002f2 <PWM_Change_Tone+0x10a>
 80002e6:	4b18      	ldr	r3, [pc, #96]	@ (8000348 <PWM_Change_Tone+0x160>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	681a      	ldr	r2, [r3, #0]
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80002f0:	e023      	b.n	800033a <PWM_Change_Tone+0x152>
        __HAL_TIM_SET_COMPARE(buzzer_pwm_timer, buzzer_pwm_channel, pulse_width); // buzzer_pwm_timer->Instance->CCR2 = pulse_width;
 80002f2:	4b14      	ldr	r3, [pc, #80]	@ (8000344 <PWM_Change_Tone+0x15c>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	2b08      	cmp	r3, #8
 80002f8:	d105      	bne.n	8000306 <PWM_Change_Tone+0x11e>
 80002fa:	4b13      	ldr	r3, [pc, #76]	@ (8000348 <PWM_Change_Tone+0x160>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	681a      	ldr	r2, [r3, #0]
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000304:	e019      	b.n	800033a <PWM_Change_Tone+0x152>
        __HAL_TIM_SET_COMPARE(buzzer_pwm_timer, buzzer_pwm_channel, pulse_width); // buzzer_pwm_timer->Instance->CCR2 = pulse_width;
 8000306:	4b0f      	ldr	r3, [pc, #60]	@ (8000344 <PWM_Change_Tone+0x15c>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	2b0c      	cmp	r3, #12
 800030c:	d105      	bne.n	800031a <PWM_Change_Tone+0x132>
 800030e:	4b0e      	ldr	r3, [pc, #56]	@ (8000348 <PWM_Change_Tone+0x160>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	681a      	ldr	r2, [r3, #0]
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000318:	e00f      	b.n	800033a <PWM_Change_Tone+0x152>
        __HAL_TIM_SET_COMPARE(buzzer_pwm_timer, buzzer_pwm_channel, pulse_width); // buzzer_pwm_timer->Instance->CCR2 = pulse_width;
 800031a:	4b0a      	ldr	r3, [pc, #40]	@ (8000344 <PWM_Change_Tone+0x15c>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	2b10      	cmp	r3, #16
 8000320:	d105      	bne.n	800032e <PWM_Change_Tone+0x146>
 8000322:	4b09      	ldr	r3, [pc, #36]	@ (8000348 <PWM_Change_Tone+0x160>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	681a      	ldr	r2, [r3, #0]
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800032c:	e005      	b.n	800033a <PWM_Change_Tone+0x152>
        __HAL_TIM_SET_COMPARE(buzzer_pwm_timer, buzzer_pwm_channel, pulse_width); // buzzer_pwm_timer->Instance->CCR2 = pulse_width;
 800032e:	4b06      	ldr	r3, [pc, #24]	@ (8000348 <PWM_Change_Tone+0x160>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	681a      	ldr	r2, [r3, #0]
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8000338:	e7ff      	b.n	800033a <PWM_Change_Tone+0x152>
 800033a:	bf00      	nop
 800033c:	3720      	adds	r7, #32
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	20000018 	.word	0x20000018
 8000348:	20000014 	.word	0x20000014
 800034c:	10624dd3 	.word	0x10624dd3

08000350 <Change_Melody>:

void Change_Melody(const Tone *melody, uint16_t tone_count)
{
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	460b      	mov	r3, r1
 800035a:	807b      	strh	r3, [r7, #2]
    melody_ptr = melody;
 800035c:	4a07      	ldr	r2, [pc, #28]	@ (800037c <Change_Melody+0x2c>)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	6013      	str	r3, [r2, #0]
    melody_tone_count = tone_count;
 8000362:	4a07      	ldr	r2, [pc, #28]	@ (8000380 <Change_Melody+0x30>)
 8000364:	887b      	ldrh	r3, [r7, #2]
 8000366:	8013      	strh	r3, [r2, #0]
    current_tone_number = 0;
 8000368:	4b06      	ldr	r3, [pc, #24]	@ (8000384 <Change_Melody+0x34>)
 800036a:	2200      	movs	r2, #0
 800036c:	801a      	strh	r2, [r3, #0]
}
 800036e:	bf00      	nop
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	200004c0 	.word	0x200004c0
 8000380:	200004c4 	.word	0x200004c4
 8000384:	200004c6 	.word	0x200004c6

08000388 <Update_Melody>:

void Update_Melody()
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
    if ((HAL_GetTick() > current_tone_end) && (current_tone_number < melody_tone_count))
 800038e:	f000 fe1f 	bl	8000fd0 <HAL_GetTick>
 8000392:	4602      	mov	r2, r0
 8000394:	4b17      	ldr	r3, [pc, #92]	@ (80003f4 <Update_Melody+0x6c>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	429a      	cmp	r2, r3
 800039a:	d927      	bls.n	80003ec <Update_Melody+0x64>
 800039c:	4b16      	ldr	r3, [pc, #88]	@ (80003f8 <Update_Melody+0x70>)
 800039e:	881b      	ldrh	r3, [r3, #0]
 80003a0:	b29a      	uxth	r2, r3
 80003a2:	4b16      	ldr	r3, [pc, #88]	@ (80003fc <Update_Melody+0x74>)
 80003a4:	881b      	ldrh	r3, [r3, #0]
 80003a6:	b29b      	uxth	r3, r3
 80003a8:	429a      	cmp	r2, r3
 80003aa:	d21f      	bcs.n	80003ec <Update_Melody+0x64>
    {
        const Tone active_tone = *(melody_ptr + current_tone_number);
 80003ac:	4b14      	ldr	r3, [pc, #80]	@ (8000400 <Update_Melody+0x78>)
 80003ae:	681a      	ldr	r2, [r3, #0]
 80003b0:	4b11      	ldr	r3, [pc, #68]	@ (80003f8 <Update_Melody+0x70>)
 80003b2:	881b      	ldrh	r3, [r3, #0]
 80003b4:	b29b      	uxth	r3, r3
 80003b6:	009b      	lsls	r3, r3, #2
 80003b8:	441a      	add	r2, r3
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	6810      	ldr	r0, [r2, #0]
 80003be:	6018      	str	r0, [r3, #0]
        PWM_Change_Tone(active_tone.frequency, volume);
 80003c0:	88bb      	ldrh	r3, [r7, #4]
 80003c2:	4a10      	ldr	r2, [pc, #64]	@ (8000404 <Update_Melody+0x7c>)
 80003c4:	8812      	ldrh	r2, [r2, #0]
 80003c6:	b292      	uxth	r2, r2
 80003c8:	4611      	mov	r1, r2
 80003ca:	4618      	mov	r0, r3
 80003cc:	f7ff ff0c 	bl	80001e8 <PWM_Change_Tone>
        current_tone_end = HAL_GetTick() + active_tone.duration;
 80003d0:	f000 fdfe 	bl	8000fd0 <HAL_GetTick>
 80003d4:	4603      	mov	r3, r0
 80003d6:	88fa      	ldrh	r2, [r7, #6]
 80003d8:	4413      	add	r3, r2
 80003da:	4a06      	ldr	r2, [pc, #24]	@ (80003f4 <Update_Melody+0x6c>)
 80003dc:	6013      	str	r3, [r2, #0]
        current_tone_number++;
 80003de:	4b06      	ldr	r3, [pc, #24]	@ (80003f8 <Update_Melody+0x70>)
 80003e0:	881b      	ldrh	r3, [r3, #0]
 80003e2:	b29b      	uxth	r3, r3
 80003e4:	3301      	adds	r3, #1
 80003e6:	b29a      	uxth	r2, r3
 80003e8:	4b03      	ldr	r3, [pc, #12]	@ (80003f8 <Update_Melody+0x70>)
 80003ea:	801a      	strh	r2, [r3, #0]
    }
}
 80003ec:	bf00      	nop
 80003ee:	3708      	adds	r7, #8
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	200004c8 	.word	0x200004c8
 80003f8:	200004c6 	.word	0x200004c6
 80003fc:	200004c4 	.word	0x200004c4
 8000400:	200004c0 	.word	0x200004c0
 8000404:	2000001c 	.word	0x2000001c

08000408 <display_digit>:
//}
//


void display_digit(uint8_t num, uint8_t digit, uint8_t dcpoint)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	71fb      	strb	r3, [r7, #7]
 8000412:	460b      	mov	r3, r1
 8000414:	71bb      	strb	r3, [r7, #6]
 8000416:	4613      	mov	r3, r2
 8000418:	717b      	strb	r3, [r7, #5]
	// Which of the four digits is this
	// Active high 7-segment, low pin -> digit on
    HAL_GPIO_WritePin(pin, bitActive0, digit == 0 ? 0 : 1);
 800041a:	4b4e      	ldr	r3, [pc, #312]	@ (8000554 <display_digit+0x14c>)
 800041c:	6818      	ldr	r0, [r3, #0]
 800041e:	4b4e      	ldr	r3, [pc, #312]	@ (8000558 <display_digit+0x150>)
 8000420:	8819      	ldrh	r1, [r3, #0]
 8000422:	79bb      	ldrb	r3, [r7, #6]
 8000424:	2b00      	cmp	r3, #0
 8000426:	bf14      	ite	ne
 8000428:	2301      	movne	r3, #1
 800042a:	2300      	moveq	r3, #0
 800042c:	b2db      	uxtb	r3, r3
 800042e:	461a      	mov	r2, r3
 8000430:	f001 f8dc 	bl	80015ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pin, bitActive1, digit == 1 ? 0 : 1);
 8000434:	4b47      	ldr	r3, [pc, #284]	@ (8000554 <display_digit+0x14c>)
 8000436:	6818      	ldr	r0, [r3, #0]
 8000438:	4b48      	ldr	r3, [pc, #288]	@ (800055c <display_digit+0x154>)
 800043a:	8819      	ldrh	r1, [r3, #0]
 800043c:	79bb      	ldrb	r3, [r7, #6]
 800043e:	2b01      	cmp	r3, #1
 8000440:	bf14      	ite	ne
 8000442:	2301      	movne	r3, #1
 8000444:	2300      	moveq	r3, #0
 8000446:	b2db      	uxtb	r3, r3
 8000448:	461a      	mov	r2, r3
 800044a:	f001 f8cf 	bl	80015ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pin, bitActive2, digit == 2 ? 0 : 1);
 800044e:	4b41      	ldr	r3, [pc, #260]	@ (8000554 <display_digit+0x14c>)
 8000450:	6818      	ldr	r0, [r3, #0]
 8000452:	4b43      	ldr	r3, [pc, #268]	@ (8000560 <display_digit+0x158>)
 8000454:	8819      	ldrh	r1, [r3, #0]
 8000456:	79bb      	ldrb	r3, [r7, #6]
 8000458:	2b02      	cmp	r3, #2
 800045a:	bf14      	ite	ne
 800045c:	2301      	movne	r3, #1
 800045e:	2300      	moveq	r3, #0
 8000460:	b2db      	uxtb	r3, r3
 8000462:	461a      	mov	r2, r3
 8000464:	f001 f8c2 	bl	80015ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pin, bitActive3, digit == 3 ? 0 : 1);
 8000468:	4b3a      	ldr	r3, [pc, #232]	@ (8000554 <display_digit+0x14c>)
 800046a:	6818      	ldr	r0, [r3, #0]
 800046c:	4b3d      	ldr	r3, [pc, #244]	@ (8000564 <display_digit+0x15c>)
 800046e:	8819      	ldrh	r1, [r3, #0]
 8000470:	79bb      	ldrb	r3, [r7, #6]
 8000472:	2b03      	cmp	r3, #3
 8000474:	bf14      	ite	ne
 8000476:	2301      	movne	r3, #1
 8000478:	2300      	moveq	r3, #0
 800047a:	b2db      	uxtb	r3, r3
 800047c:	461a      	mov	r2, r3
 800047e:	f001 f8b5 	bl	80015ec <HAL_GPIO_WritePin>

    // ABCD BCD Output
    HAL_GPIO_WritePin(pin, bit0, (num == 1 || num == 3 || num == 5 || num == 7 || num == 9));
 8000482:	4b34      	ldr	r3, [pc, #208]	@ (8000554 <display_digit+0x14c>)
 8000484:	6818      	ldr	r0, [r3, #0]
 8000486:	4b38      	ldr	r3, [pc, #224]	@ (8000568 <display_digit+0x160>)
 8000488:	8819      	ldrh	r1, [r3, #0]
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	2b01      	cmp	r3, #1
 800048e:	d00b      	beq.n	80004a8 <display_digit+0xa0>
 8000490:	79fb      	ldrb	r3, [r7, #7]
 8000492:	2b03      	cmp	r3, #3
 8000494:	d008      	beq.n	80004a8 <display_digit+0xa0>
 8000496:	79fb      	ldrb	r3, [r7, #7]
 8000498:	2b05      	cmp	r3, #5
 800049a:	d005      	beq.n	80004a8 <display_digit+0xa0>
 800049c:	79fb      	ldrb	r3, [r7, #7]
 800049e:	2b07      	cmp	r3, #7
 80004a0:	d002      	beq.n	80004a8 <display_digit+0xa0>
 80004a2:	79fb      	ldrb	r3, [r7, #7]
 80004a4:	2b09      	cmp	r3, #9
 80004a6:	d101      	bne.n	80004ac <display_digit+0xa4>
 80004a8:	2301      	movs	r3, #1
 80004aa:	e000      	b.n	80004ae <display_digit+0xa6>
 80004ac:	2300      	movs	r3, #0
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	461a      	mov	r2, r3
 80004b2:	f001 f89b 	bl	80015ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pin, bit1, (num == 2 || num == 3 || num == 6 || num == 7));
 80004b6:	4b27      	ldr	r3, [pc, #156]	@ (8000554 <display_digit+0x14c>)
 80004b8:	6818      	ldr	r0, [r3, #0]
 80004ba:	4b2c      	ldr	r3, [pc, #176]	@ (800056c <display_digit+0x164>)
 80004bc:	8819      	ldrh	r1, [r3, #0]
 80004be:	79fb      	ldrb	r3, [r7, #7]
 80004c0:	2b02      	cmp	r3, #2
 80004c2:	d008      	beq.n	80004d6 <display_digit+0xce>
 80004c4:	79fb      	ldrb	r3, [r7, #7]
 80004c6:	2b03      	cmp	r3, #3
 80004c8:	d005      	beq.n	80004d6 <display_digit+0xce>
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	2b06      	cmp	r3, #6
 80004ce:	d002      	beq.n	80004d6 <display_digit+0xce>
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	2b07      	cmp	r3, #7
 80004d4:	d101      	bne.n	80004da <display_digit+0xd2>
 80004d6:	2301      	movs	r3, #1
 80004d8:	e000      	b.n	80004dc <display_digit+0xd4>
 80004da:	2300      	movs	r3, #0
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	461a      	mov	r2, r3
 80004e0:	f001 f884 	bl	80015ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pin, bit2, (num == 4 || num == 5 || num == 6 || num == 7));
 80004e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000554 <display_digit+0x14c>)
 80004e6:	6818      	ldr	r0, [r3, #0]
 80004e8:	4b21      	ldr	r3, [pc, #132]	@ (8000570 <display_digit+0x168>)
 80004ea:	8819      	ldrh	r1, [r3, #0]
 80004ec:	79fb      	ldrb	r3, [r7, #7]
 80004ee:	2b04      	cmp	r3, #4
 80004f0:	d008      	beq.n	8000504 <display_digit+0xfc>
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	2b05      	cmp	r3, #5
 80004f6:	d005      	beq.n	8000504 <display_digit+0xfc>
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	2b06      	cmp	r3, #6
 80004fc:	d002      	beq.n	8000504 <display_digit+0xfc>
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	2b07      	cmp	r3, #7
 8000502:	d101      	bne.n	8000508 <display_digit+0x100>
 8000504:	2301      	movs	r3, #1
 8000506:	e000      	b.n	800050a <display_digit+0x102>
 8000508:	2300      	movs	r3, #0
 800050a:	b2db      	uxtb	r3, r3
 800050c:	461a      	mov	r2, r3
 800050e:	f001 f86d 	bl	80015ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pin, bit3, (num == 8 || num == 9));
 8000512:	4b10      	ldr	r3, [pc, #64]	@ (8000554 <display_digit+0x14c>)
 8000514:	6818      	ldr	r0, [r3, #0]
 8000516:	4b17      	ldr	r3, [pc, #92]	@ (8000574 <display_digit+0x16c>)
 8000518:	8819      	ldrh	r1, [r3, #0]
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	2b08      	cmp	r3, #8
 800051e:	d002      	beq.n	8000526 <display_digit+0x11e>
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	2b09      	cmp	r3, #9
 8000524:	d101      	bne.n	800052a <display_digit+0x122>
 8000526:	2301      	movs	r3, #1
 8000528:	e000      	b.n	800052c <display_digit+0x124>
 800052a:	2300      	movs	r3, #0
 800052c:	b2db      	uxtb	r3, r3
 800052e:	461a      	mov	r2, r3
 8000530:	f001 f85c 	bl	80015ec <HAL_GPIO_WritePin>

    // Is decimal point on or off for digit?
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, dcpoint == 1 ? 1 : 0);
 8000534:	797b      	ldrb	r3, [r7, #5]
 8000536:	2b01      	cmp	r3, #1
 8000538:	bf0c      	ite	eq
 800053a:	2301      	moveq	r3, #1
 800053c:	2300      	movne	r3, #0
 800053e:	b2db      	uxtb	r3, r3
 8000540:	461a      	mov	r2, r3
 8000542:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000546:	480c      	ldr	r0, [pc, #48]	@ (8000578 <display_digit+0x170>)
 8000548:	f001 f850 	bl	80015ec <HAL_GPIO_WritePin>
}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20000000 	.word	0x20000000
 8000558:	2000000c 	.word	0x2000000c
 800055c:	2000000e 	.word	0x2000000e
 8000560:	20000010 	.word	0x20000010
 8000564:	20000012 	.word	0x20000012
 8000568:	20000004 	.word	0x20000004
 800056c:	20000006 	.word	0x20000006
 8000570:	20000008 	.word	0x20000008
 8000574:	2000000a 	.word	0x2000000a
 8000578:	48000800 	.word	0x48000800

0800057c <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2) {
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800058c:	d116      	bne.n	80005bc <HAL_TIM_PeriodElapsedCallback+0x40>

		Update_Melody();
 800058e:	f7ff fefb 	bl	8000388 <Update_Melody>

		static uint8_t i = 0;
		display_digit(i, i, 1);
 8000592:	4b0c      	ldr	r3, [pc, #48]	@ (80005c4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	4a0b      	ldr	r2, [pc, #44]	@ (80005c4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000598:	7811      	ldrb	r1, [r2, #0]
 800059a:	2201      	movs	r2, #1
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff ff33 	bl	8000408 <display_digit>
		++i;
 80005a2:	4b08      	ldr	r3, [pc, #32]	@ (80005c4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	3301      	adds	r3, #1
 80005a8:	b2da      	uxtb	r2, r3
 80005aa:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80005ac:	701a      	strb	r2, [r3, #0]
		i = i % 4;
 80005ae:	4b05      	ldr	r3, [pc, #20]	@ (80005c4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	f003 0303 	and.w	r3, r3, #3
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	4b02      	ldr	r3, [pc, #8]	@ (80005c4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80005ba:	701a      	strb	r2, [r3, #0]

	}
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	200004cc 	.word	0x200004cc

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005cc:	f000 fca6 	bl	8000f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d0:	f000 f82a 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d4:	f000 f9d4 	bl	8000980 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005d8:	f000 f88a 	bl	80006f0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80005dc:	f000 f8c8 	bl	8000770 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80005e0:	f000 f9ac 	bl	800093c <MX_USB_PCD_Init>
  MX_TIM2_Init();
 80005e4:	f000 f902 	bl	80007ec <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80005e8:	f000 f978 	bl	80008dc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  Update_Melody();
 80005ec:	f7ff fecc 	bl	8000388 <Update_Melody>
  HAL_TIM_Base_Start_IT(&htim2);
 80005f0:	4809      	ldr	r0, [pc, #36]	@ (8000618 <main+0x50>)
 80005f2:	f002 ff31 	bl	8003458 <HAL_TIM_Base_Start_IT>
  PWM_Start();
 80005f6:	f7ff fde7 	bl	80001c8 <PWM_Start>
//  Change_Melody(super_mario_bros, ARRAY_LENGTH(super_mario_bros));
  Change_Melody(mario2, ARRAY_LENGTH(mario2));
 80005fa:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 80005fe:	4807      	ldr	r0, [pc, #28]	@ (800061c <main+0x54>)
 8000600:	f7ff fea6 	bl	8000350 <Change_Melody>
  HAL_UART_Transmit(&huart1, "salam\r", 6, HAL_MAX_DELAY);
 8000604:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000608:	2206      	movs	r2, #6
 800060a:	4905      	ldr	r1, [pc, #20]	@ (8000620 <main+0x58>)
 800060c:	4805      	ldr	r0, [pc, #20]	@ (8000624 <main+0x5c>)
 800060e:	f004 f927 	bl	8004860 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000612:	bf00      	nop
 8000614:	e7fd      	b.n	8000612 <main+0x4a>
 8000616:	bf00      	nop
 8000618:	20000100 	.word	0x20000100
 800061c:	080058d8 	.word	0x080058d8
 8000620:	080058d0 	.word	0x080058d0
 8000624:	2000014c 	.word	0x2000014c

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b09e      	sub	sp, #120	@ 0x78
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000632:	2228      	movs	r2, #40	@ 0x28
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f005 f911 	bl	800585e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800064c:	463b      	mov	r3, r7
 800064e:	223c      	movs	r2, #60	@ 0x3c
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f005 f903 	bl	800585e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000658:	2303      	movs	r3, #3
 800065a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800065c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000660:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000666:	2301      	movs	r3, #1
 8000668:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066a:	2310      	movs	r3, #16
 800066c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000672:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000676:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000678:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800067c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000682:	4618      	mov	r0, r3
 8000684:	f001 f9c2 	bl	8001a0c <HAL_RCC_OscConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800068e:	f000 fa2d 	bl	8000aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000692:	230f      	movs	r3, #15
 8000694:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000696:	2302      	movs	r3, #2
 8000698:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800069e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006a8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80006ac:	2101      	movs	r1, #1
 80006ae:	4618      	mov	r0, r3
 80006b0:	f002 f9ea 	bl	8002a88 <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006ba:	f000 fa17 	bl	8000aec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 80006be:	4b0b      	ldr	r3, [pc, #44]	@ (80006ec <SystemClock_Config+0xc4>)
 80006c0:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80006ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d0:	463b      	mov	r3, r7
 80006d2:	4618      	mov	r0, r3
 80006d4:	f002 fc0e 	bl	8002ef4 <HAL_RCCEx_PeriphCLKConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80006de:	f000 fa05 	bl	8000aec <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3778      	adds	r7, #120	@ 0x78
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	00020021 	.word	0x00020021

080006f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000764 <MX_I2C1_Init+0x74>)
 80006f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000768 <MX_I2C1_Init+0x78>)
 80006f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80006fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000764 <MX_I2C1_Init+0x74>)
 80006fc:	4a1b      	ldr	r2, [pc, #108]	@ (800076c <MX_I2C1_Init+0x7c>)
 80006fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000700:	4b18      	ldr	r3, [pc, #96]	@ (8000764 <MX_I2C1_Init+0x74>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000706:	4b17      	ldr	r3, [pc, #92]	@ (8000764 <MX_I2C1_Init+0x74>)
 8000708:	2201      	movs	r2, #1
 800070a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800070c:	4b15      	ldr	r3, [pc, #84]	@ (8000764 <MX_I2C1_Init+0x74>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000712:	4b14      	ldr	r3, [pc, #80]	@ (8000764 <MX_I2C1_Init+0x74>)
 8000714:	2200      	movs	r2, #0
 8000716:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000718:	4b12      	ldr	r3, [pc, #72]	@ (8000764 <MX_I2C1_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800071e:	4b11      	ldr	r3, [pc, #68]	@ (8000764 <MX_I2C1_Init+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000724:	4b0f      	ldr	r3, [pc, #60]	@ (8000764 <MX_I2C1_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800072a:	480e      	ldr	r0, [pc, #56]	@ (8000764 <MX_I2C1_Init+0x74>)
 800072c:	f000 ff76 	bl	800161c <HAL_I2C_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000736:	f000 f9d9 	bl	8000aec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800073a:	2100      	movs	r1, #0
 800073c:	4809      	ldr	r0, [pc, #36]	@ (8000764 <MX_I2C1_Init+0x74>)
 800073e:	f000 fffc 	bl	800173a <HAL_I2CEx_ConfigAnalogFilter>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000748:	f000 f9d0 	bl	8000aec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800074c:	2100      	movs	r1, #0
 800074e:	4805      	ldr	r0, [pc, #20]	@ (8000764 <MX_I2C1_Init+0x74>)
 8000750:	f001 f83e 	bl	80017d0 <HAL_I2CEx_ConfigDigitalFilter>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800075a:	f000 f9c7 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000048 	.word	0x20000048
 8000768:	40005400 	.word	0x40005400
 800076c:	2000090e 	.word	0x2000090e

08000770 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000774:	4b1b      	ldr	r3, [pc, #108]	@ (80007e4 <MX_SPI1_Init+0x74>)
 8000776:	4a1c      	ldr	r2, [pc, #112]	@ (80007e8 <MX_SPI1_Init+0x78>)
 8000778:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800077a:	4b1a      	ldr	r3, [pc, #104]	@ (80007e4 <MX_SPI1_Init+0x74>)
 800077c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000780:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000782:	4b18      	ldr	r3, [pc, #96]	@ (80007e4 <MX_SPI1_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000788:	4b16      	ldr	r3, [pc, #88]	@ (80007e4 <MX_SPI1_Init+0x74>)
 800078a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800078e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000790:	4b14      	ldr	r3, [pc, #80]	@ (80007e4 <MX_SPI1_Init+0x74>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000796:	4b13      	ldr	r3, [pc, #76]	@ (80007e4 <MX_SPI1_Init+0x74>)
 8000798:	2200      	movs	r2, #0
 800079a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800079c:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <MX_SPI1_Init+0x74>)
 800079e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <MX_SPI1_Init+0x74>)
 80007a6:	2208      	movs	r2, #8
 80007a8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <MX_SPI1_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <MX_SPI1_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	@ (80007e4 <MX_SPI1_Init+0x74>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007bc:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <MX_SPI1_Init+0x74>)
 80007be:	2207      	movs	r2, #7
 80007c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <MX_SPI1_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007c8:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <MX_SPI1_Init+0x74>)
 80007ca:	2208      	movs	r2, #8
 80007cc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	@ (80007e4 <MX_SPI1_Init+0x74>)
 80007d0:	f002 fd40 	bl	8003254 <HAL_SPI_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007da:	f000 f987 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	2000009c 	.word	0x2000009c
 80007e8:	40013000 	.word	0x40013000

080007ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08e      	sub	sp, #56	@ 0x38
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000800:	f107 031c 	add.w	r3, r7, #28
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800080c:	463b      	mov	r3, r7
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]
 800081a:	615a      	str	r2, [r3, #20]
 800081c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800081e:	4b2e      	ldr	r3, [pc, #184]	@ (80008d8 <MX_TIM2_Init+0xec>)
 8000820:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000824:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4800;
 8000826:	4b2c      	ldr	r3, [pc, #176]	@ (80008d8 <MX_TIM2_Init+0xec>)
 8000828:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 800082c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082e:	4b2a      	ldr	r3, [pc, #168]	@ (80008d8 <MX_TIM2_Init+0xec>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8000834:	4b28      	ldr	r3, [pc, #160]	@ (80008d8 <MX_TIM2_Init+0xec>)
 8000836:	f242 7210 	movw	r2, #10000	@ 0x2710
 800083a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083c:	4b26      	ldr	r3, [pc, #152]	@ (80008d8 <MX_TIM2_Init+0xec>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000842:	4b25      	ldr	r3, [pc, #148]	@ (80008d8 <MX_TIM2_Init+0xec>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000848:	4823      	ldr	r0, [pc, #140]	@ (80008d8 <MX_TIM2_Init+0xec>)
 800084a:	f002 fdae 	bl	80033aa <HAL_TIM_Base_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000854:	f000 f94a 	bl	8000aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000858:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800085c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800085e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000862:	4619      	mov	r1, r3
 8000864:	481c      	ldr	r0, [pc, #112]	@ (80008d8 <MX_TIM2_Init+0xec>)
 8000866:	f003 f9f7 	bl	8003c58 <HAL_TIM_ConfigClockSource>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000870:	f000 f93c 	bl	8000aec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000874:	4818      	ldr	r0, [pc, #96]	@ (80008d8 <MX_TIM2_Init+0xec>)
 8000876:	f002 fe59 	bl	800352c <HAL_TIM_PWM_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000880:	f000 f934 	bl	8000aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4619      	mov	r1, r3
 8000892:	4811      	ldr	r0, [pc, #68]	@ (80008d8 <MX_TIM2_Init+0xec>)
 8000894:	f003 fef8 	bl	8004688 <HAL_TIMEx_MasterConfigSynchronization>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800089e:	f000 f925 	bl	8000aec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008a2:	2360      	movs	r3, #96	@ 0x60
 80008a4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008b2:	463b      	mov	r3, r7
 80008b4:	2204      	movs	r2, #4
 80008b6:	4619      	mov	r1, r3
 80008b8:	4807      	ldr	r0, [pc, #28]	@ (80008d8 <MX_TIM2_Init+0xec>)
 80008ba:	f003 f8b9 	bl	8003a30 <HAL_TIM_PWM_ConfigChannel>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80008c4:	f000 f912 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008c8:	4803      	ldr	r0, [pc, #12]	@ (80008d8 <MX_TIM2_Init+0xec>)
 80008ca:	f000 f9e3 	bl	8000c94 <HAL_TIM_MspPostInit>

}
 80008ce:	bf00      	nop
 80008d0:	3738      	adds	r7, #56	@ 0x38
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000100 	.word	0x20000100

080008dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008e0:	4b14      	ldr	r3, [pc, #80]	@ (8000934 <MX_USART1_UART_Init+0x58>)
 80008e2:	4a15      	ldr	r2, [pc, #84]	@ (8000938 <MX_USART1_UART_Init+0x5c>)
 80008e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80008e6:	4b13      	ldr	r3, [pc, #76]	@ (8000934 <MX_USART1_UART_Init+0x58>)
 80008e8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80008ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ee:	4b11      	ldr	r3, [pc, #68]	@ (8000934 <MX_USART1_UART_Init+0x58>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000934 <MX_USART1_UART_Init+0x58>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000934 <MX_USART1_UART_Init+0x58>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000900:	4b0c      	ldr	r3, [pc, #48]	@ (8000934 <MX_USART1_UART_Init+0x58>)
 8000902:	220c      	movs	r2, #12
 8000904:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000906:	4b0b      	ldr	r3, [pc, #44]	@ (8000934 <MX_USART1_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800090c:	4b09      	ldr	r3, [pc, #36]	@ (8000934 <MX_USART1_UART_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000912:	4b08      	ldr	r3, [pc, #32]	@ (8000934 <MX_USART1_UART_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000918:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <MX_USART1_UART_Init+0x58>)
 800091a:	2200      	movs	r2, #0
 800091c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800091e:	4805      	ldr	r0, [pc, #20]	@ (8000934 <MX_USART1_UART_Init+0x58>)
 8000920:	f003 ff50 	bl	80047c4 <HAL_UART_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800092a:	f000 f8df 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	2000014c 	.word	0x2000014c
 8000938:	40013800 	.word	0x40013800

0800093c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000940:	4b0d      	ldr	r3, [pc, #52]	@ (8000978 <MX_USB_PCD_Init+0x3c>)
 8000942:	4a0e      	ldr	r2, [pc, #56]	@ (800097c <MX_USB_PCD_Init+0x40>)
 8000944:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000946:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <MX_USB_PCD_Init+0x3c>)
 8000948:	2208      	movs	r2, #8
 800094a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800094c:	4b0a      	ldr	r3, [pc, #40]	@ (8000978 <MX_USB_PCD_Init+0x3c>)
 800094e:	2202      	movs	r2, #2
 8000950:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000952:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <MX_USB_PCD_Init+0x3c>)
 8000954:	2202      	movs	r2, #2
 8000956:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000958:	4b07      	ldr	r3, [pc, #28]	@ (8000978 <MX_USB_PCD_Init+0x3c>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800095e:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <MX_USB_PCD_Init+0x3c>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000964:	4804      	ldr	r0, [pc, #16]	@ (8000978 <MX_USB_PCD_Init+0x3c>)
 8000966:	f000 ff7f 	bl	8001868 <HAL_PCD_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000970:	f000 f8bc 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	200001d4 	.word	0x200001d4
 800097c:	40005c00 	.word	0x40005c00

08000980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08c      	sub	sp, #48	@ 0x30
 8000984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000996:	4b51      	ldr	r3, [pc, #324]	@ (8000adc <MX_GPIO_Init+0x15c>)
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	4a50      	ldr	r2, [pc, #320]	@ (8000adc <MX_GPIO_Init+0x15c>)
 800099c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009a0:	6153      	str	r3, [r2, #20]
 80009a2:	4b4e      	ldr	r3, [pc, #312]	@ (8000adc <MX_GPIO_Init+0x15c>)
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009aa:	61bb      	str	r3, [r7, #24]
 80009ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ae:	4b4b      	ldr	r3, [pc, #300]	@ (8000adc <MX_GPIO_Init+0x15c>)
 80009b0:	695b      	ldr	r3, [r3, #20]
 80009b2:	4a4a      	ldr	r2, [pc, #296]	@ (8000adc <MX_GPIO_Init+0x15c>)
 80009b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80009b8:	6153      	str	r3, [r2, #20]
 80009ba:	4b48      	ldr	r3, [pc, #288]	@ (8000adc <MX_GPIO_Init+0x15c>)
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009c6:	4b45      	ldr	r3, [pc, #276]	@ (8000adc <MX_GPIO_Init+0x15c>)
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	4a44      	ldr	r2, [pc, #272]	@ (8000adc <MX_GPIO_Init+0x15c>)
 80009cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009d0:	6153      	str	r3, [r2, #20]
 80009d2:	4b42      	ldr	r3, [pc, #264]	@ (8000adc <MX_GPIO_Init+0x15c>)
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	4b3f      	ldr	r3, [pc, #252]	@ (8000adc <MX_GPIO_Init+0x15c>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	4a3e      	ldr	r2, [pc, #248]	@ (8000adc <MX_GPIO_Init+0x15c>)
 80009e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009e8:	6153      	str	r3, [r2, #20]
 80009ea:	4b3c      	ldr	r3, [pc, #240]	@ (8000adc <MX_GPIO_Init+0x15c>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f6:	4b39      	ldr	r3, [pc, #228]	@ (8000adc <MX_GPIO_Init+0x15c>)
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	4a38      	ldr	r2, [pc, #224]	@ (8000adc <MX_GPIO_Init+0x15c>)
 80009fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000a00:	6153      	str	r3, [r2, #20]
 8000a02:	4b36      	ldr	r3, [pc, #216]	@ (8000adc <MX_GPIO_Init+0x15c>)
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0e:	4b33      	ldr	r3, [pc, #204]	@ (8000adc <MX_GPIO_Init+0x15c>)
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	4a32      	ldr	r2, [pc, #200]	@ (8000adc <MX_GPIO_Init+0x15c>)
 8000a14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a18:	6153      	str	r3, [r2, #20]
 8000a1a:	4b30      	ldr	r3, [pc, #192]	@ (8000adc <MX_GPIO_Init+0x15c>)
 8000a1c:	695b      	ldr	r3, [r3, #20]
 8000a1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000a26:	2200      	movs	r2, #0
 8000a28:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000a2c:	482c      	ldr	r0, [pc, #176]	@ (8000ae0 <MX_GPIO_Init+0x160>)
 8000a2e:	f000 fddd 	bl	80015ec <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a38:	482a      	ldr	r0, [pc, #168]	@ (8000ae4 <MX_GPIO_Init+0x164>)
 8000a3a:	f000 fdd7 	bl	80015ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000a3e:	2200      	movs	r2, #0
 8000a40:	21ff      	movs	r1, #255	@ 0xff
 8000a42:	4829      	ldr	r0, [pc, #164]	@ (8000ae8 <MX_GPIO_Init+0x168>)
 8000a44:	f000 fdd2 	bl	80015ec <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000a48:	2337      	movs	r3, #55	@ 0x37
 8000a4a:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a4c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4820      	ldr	r0, [pc, #128]	@ (8000ae0 <MX_GPIO_Init+0x160>)
 8000a5e:	f000 fc4b 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000a62:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8000a66:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4819      	ldr	r0, [pc, #100]	@ (8000ae0 <MX_GPIO_Init+0x160>)
 8000a7c:	f000 fc3c 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a80:	2301      	movs	r3, #1
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4619      	mov	r1, r3
 8000a92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a96:	f000 fc2f 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	480c      	ldr	r0, [pc, #48]	@ (8000ae4 <MX_GPIO_Init+0x164>)
 8000ab4:	f000 fc20 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000ab8:	23ff      	movs	r3, #255	@ 0xff
 8000aba:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abc:	2301      	movs	r3, #1
 8000abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4619      	mov	r1, r3
 8000ace:	4806      	ldr	r0, [pc, #24]	@ (8000ae8 <MX_GPIO_Init+0x168>)
 8000ad0:	f000 fc12 	bl	80012f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ad4:	bf00      	nop
 8000ad6:	3730      	adds	r7, #48	@ 0x30
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	48001000 	.word	0x48001000
 8000ae4:	48000800 	.word	0x48000800
 8000ae8:	48000c00 	.word	0x48000c00

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af0:	b672      	cpsid	i
}
 8000af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <Error_Handler+0x8>

08000af8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <HAL_MspInit+0x44>)
 8000b00:	699b      	ldr	r3, [r3, #24]
 8000b02:	4a0e      	ldr	r2, [pc, #56]	@ (8000b3c <HAL_MspInit+0x44>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6193      	str	r3, [r2, #24]
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b3c <HAL_MspInit+0x44>)
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b16:	4b09      	ldr	r3, [pc, #36]	@ (8000b3c <HAL_MspInit+0x44>)
 8000b18:	69db      	ldr	r3, [r3, #28]
 8000b1a:	4a08      	ldr	r2, [pc, #32]	@ (8000b3c <HAL_MspInit+0x44>)
 8000b1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b20:	61d3      	str	r3, [r2, #28]
 8000b22:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <HAL_MspInit+0x44>)
 8000b24:	69db      	ldr	r3, [r3, #28]
 8000b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b2e:	2007      	movs	r0, #7
 8000b30:	f000 fb2a 	bl	8001188 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40021000 	.word	0x40021000

08000b40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	@ 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a17      	ldr	r2, [pc, #92]	@ (8000bbc <HAL_I2C_MspInit+0x7c>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d127      	bne.n	8000bb2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	4b17      	ldr	r3, [pc, #92]	@ (8000bc0 <HAL_I2C_MspInit+0x80>)
 8000b64:	695b      	ldr	r3, [r3, #20]
 8000b66:	4a16      	ldr	r2, [pc, #88]	@ (8000bc0 <HAL_I2C_MspInit+0x80>)
 8000b68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b6c:	6153      	str	r3, [r2, #20]
 8000b6e:	4b14      	ldr	r3, [pc, #80]	@ (8000bc0 <HAL_I2C_MspInit+0x80>)
 8000b70:	695b      	ldr	r3, [r3, #20]
 8000b72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000b7a:	23c0      	movs	r3, #192	@ 0xc0
 8000b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b7e:	2312      	movs	r3, #18
 8000b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b86:	2303      	movs	r3, #3
 8000b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	480b      	ldr	r0, [pc, #44]	@ (8000bc4 <HAL_I2C_MspInit+0x84>)
 8000b96:	f000 fbaf 	bl	80012f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b9a:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <HAL_I2C_MspInit+0x80>)
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	4a08      	ldr	r2, [pc, #32]	@ (8000bc0 <HAL_I2C_MspInit+0x80>)
 8000ba0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ba4:	61d3      	str	r3, [r2, #28]
 8000ba6:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <HAL_I2C_MspInit+0x80>)
 8000ba8:	69db      	ldr	r3, [r3, #28]
 8000baa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bb2:	bf00      	nop
 8000bb4:	3728      	adds	r7, #40	@ 0x28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40005400 	.word	0x40005400
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	48000400 	.word	0x48000400

08000bc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	@ 0x28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a17      	ldr	r2, [pc, #92]	@ (8000c44 <HAL_SPI_MspInit+0x7c>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d128      	bne.n	8000c3c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bea:	4b17      	ldr	r3, [pc, #92]	@ (8000c48 <HAL_SPI_MspInit+0x80>)
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	4a16      	ldr	r2, [pc, #88]	@ (8000c48 <HAL_SPI_MspInit+0x80>)
 8000bf0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bf4:	6193      	str	r3, [r2, #24]
 8000bf6:	4b14      	ldr	r3, [pc, #80]	@ (8000c48 <HAL_SPI_MspInit+0x80>)
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <HAL_SPI_MspInit+0x80>)
 8000c04:	695b      	ldr	r3, [r3, #20]
 8000c06:	4a10      	ldr	r2, [pc, #64]	@ (8000c48 <HAL_SPI_MspInit+0x80>)
 8000c08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c0c:	6153      	str	r3, [r2, #20]
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <HAL_SPI_MspInit+0x80>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000c1a:	23e0      	movs	r3, #224	@ 0xe0
 8000c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c2a:	2305      	movs	r3, #5
 8000c2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c38:	f000 fb5e 	bl	80012f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c3c:	bf00      	nop
 8000c3e:	3728      	adds	r7, #40	@ 0x28
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40013000 	.word	0x40013000
 8000c48:	40021000 	.word	0x40021000

08000c4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c5c:	d113      	bne.n	8000c86 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c90 <HAL_TIM_Base_MspInit+0x44>)
 8000c60:	69db      	ldr	r3, [r3, #28]
 8000c62:	4a0b      	ldr	r2, [pc, #44]	@ (8000c90 <HAL_TIM_Base_MspInit+0x44>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	61d3      	str	r3, [r2, #28]
 8000c6a:	4b09      	ldr	r3, [pc, #36]	@ (8000c90 <HAL_TIM_Base_MspInit+0x44>)
 8000c6c:	69db      	ldr	r3, [r3, #28]
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2100      	movs	r1, #0
 8000c7a:	201c      	movs	r0, #28
 8000c7c:	f000 fa8f 	bl	800119e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c80:	201c      	movs	r0, #28
 8000c82:	f000 faa8 	bl	80011d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40021000 	.word	0x40021000

08000c94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b088      	sub	sp, #32
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 030c 	add.w	r3, r7, #12
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cb4:	d11c      	bne.n	8000cf0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	4b10      	ldr	r3, [pc, #64]	@ (8000cf8 <HAL_TIM_MspPostInit+0x64>)
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	4a0f      	ldr	r2, [pc, #60]	@ (8000cf8 <HAL_TIM_MspPostInit+0x64>)
 8000cbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cc0:	6153      	str	r3, [r2, #20]
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf8 <HAL_TIM_MspPostInit+0x64>)
 8000cc4:	695b      	ldr	r3, [r3, #20]
 8000cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce2:	f107 030c 	add.w	r3, r7, #12
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cec:	f000 fb04 	bl	80012f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000cf0:	bf00      	nop
 8000cf2:	3720      	adds	r7, #32
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40021000 	.word	0x40021000

08000cfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	@ 0x28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a1b      	ldr	r2, [pc, #108]	@ (8000d88 <HAL_UART_MspInit+0x8c>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d12f      	bne.n	8000d7e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d1e:	4b1b      	ldr	r3, [pc, #108]	@ (8000d8c <HAL_UART_MspInit+0x90>)
 8000d20:	699b      	ldr	r3, [r3, #24]
 8000d22:	4a1a      	ldr	r2, [pc, #104]	@ (8000d8c <HAL_UART_MspInit+0x90>)
 8000d24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d28:	6193      	str	r3, [r2, #24]
 8000d2a:	4b18      	ldr	r3, [pc, #96]	@ (8000d8c <HAL_UART_MspInit+0x90>)
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d36:	4b15      	ldr	r3, [pc, #84]	@ (8000d8c <HAL_UART_MspInit+0x90>)
 8000d38:	695b      	ldr	r3, [r3, #20]
 8000d3a:	4a14      	ldr	r2, [pc, #80]	@ (8000d8c <HAL_UART_MspInit+0x90>)
 8000d3c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000d40:	6153      	str	r3, [r2, #20]
 8000d42:	4b12      	ldr	r3, [pc, #72]	@ (8000d8c <HAL_UART_MspInit+0x90>)
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d4e:	2330      	movs	r3, #48	@ 0x30
 8000d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d5e:	2307      	movs	r3, #7
 8000d60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4619      	mov	r1, r3
 8000d68:	4809      	ldr	r0, [pc, #36]	@ (8000d90 <HAL_UART_MspInit+0x94>)
 8000d6a:	f000 fac5 	bl	80012f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2100      	movs	r1, #0
 8000d72:	2025      	movs	r0, #37	@ 0x25
 8000d74:	f000 fa13 	bl	800119e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d78:	2025      	movs	r0, #37	@ 0x25
 8000d7a:	f000 fa2c 	bl	80011d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d7e:	bf00      	nop
 8000d80:	3728      	adds	r7, #40	@ 0x28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40013800 	.word	0x40013800
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	48000800 	.word	0x48000800

08000d94 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	@ 0x28
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a18      	ldr	r2, [pc, #96]	@ (8000e14 <HAL_PCD_MspInit+0x80>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d129      	bne.n	8000e0a <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	4b18      	ldr	r3, [pc, #96]	@ (8000e18 <HAL_PCD_MspInit+0x84>)
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	4a17      	ldr	r2, [pc, #92]	@ (8000e18 <HAL_PCD_MspInit+0x84>)
 8000dbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dc0:	6153      	str	r3, [r2, #20]
 8000dc2:	4b15      	ldr	r3, [pc, #84]	@ (8000e18 <HAL_PCD_MspInit+0x84>)
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000dce:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000de0:	230e      	movs	r3, #14
 8000de2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	4619      	mov	r1, r3
 8000dea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dee:	f000 fa83 	bl	80012f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000df2:	4b09      	ldr	r3, [pc, #36]	@ (8000e18 <HAL_PCD_MspInit+0x84>)
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	4a08      	ldr	r2, [pc, #32]	@ (8000e18 <HAL_PCD_MspInit+0x84>)
 8000df8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000dfc:	61d3      	str	r3, [r2, #28]
 8000dfe:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <HAL_PCD_MspInit+0x84>)
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000e0a:	bf00      	nop
 8000e0c:	3728      	adds	r7, #40	@ 0x28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40005c00 	.word	0x40005c00
 8000e18:	40021000 	.word	0x40021000

08000e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <NMI_Handler+0x4>

08000e24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <HardFault_Handler+0x4>

08000e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <MemManage_Handler+0x4>

08000e34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <BusFault_Handler+0x4>

08000e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <UsageFault_Handler+0x4>

08000e44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e72:	f000 f899 	bl	8000fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e80:	4802      	ldr	r0, [pc, #8]	@ (8000e8c <TIM2_IRQHandler+0x10>)
 8000e82:	f002 fcb5 	bl	80037f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000100 	.word	0x20000100

08000e90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e94:	4802      	ldr	r0, [pc, #8]	@ (8000ea0 <USART1_IRQHandler+0x10>)
 8000e96:	f003 fd6d 	bl	8004974 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	2000014c 	.word	0x2000014c

08000ea4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea8:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <SystemInit+0x20>)
 8000eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000eae:	4a05      	ldr	r2, [pc, #20]	@ (8000ec4 <SystemInit+0x20>)
 8000eb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000eb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ec8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f00 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ecc:	f7ff ffea 	bl	8000ea4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ed0:	480c      	ldr	r0, [pc, #48]	@ (8000f04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ed2:	490d      	ldr	r1, [pc, #52]	@ (8000f08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ed4:	4a0d      	ldr	r2, [pc, #52]	@ (8000f0c <LoopForever+0xe>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed8:	e002      	b.n	8000ee0 <LoopCopyDataInit>

08000eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ede:	3304      	adds	r3, #4

08000ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee4:	d3f9      	bcc.n	8000eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ee8:	4c0a      	ldr	r4, [pc, #40]	@ (8000f14 <LoopForever+0x16>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eec:	e001      	b.n	8000ef2 <LoopFillZerobss>

08000eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef0:	3204      	adds	r2, #4

08000ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef4:	d3fb      	bcc.n	8000eee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ef6:	f004 fcbb 	bl	8005870 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000efa:	f7ff fb65 	bl	80005c8 <main>

08000efe <LoopForever>:

LoopForever:
    b LoopForever
 8000efe:	e7fe      	b.n	8000efe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f00:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f08:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000f0c:	08005e20 	.word	0x08005e20
  ldr r2, =_sbss
 8000f10:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000f14:	200004d4 	.word	0x200004d4

08000f18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f18:	e7fe      	b.n	8000f18 <ADC1_2_IRQHandler>
	...

08000f1c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f20:	4b08      	ldr	r3, [pc, #32]	@ (8000f44 <HAL_Init+0x28>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a07      	ldr	r2, [pc, #28]	@ (8000f44 <HAL_Init+0x28>)
 8000f26:	f043 0310 	orr.w	r3, r3, #16
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f2c:	2003      	movs	r0, #3
 8000f2e:	f000 f92b 	bl	8001188 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f32:	2000      	movs	r0, #0
 8000f34:	f000 f808 	bl	8000f48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f38:	f7ff fdde 	bl	8000af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40022000 	.word	0x40022000

08000f48 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f50:	4b12      	ldr	r3, [pc, #72]	@ (8000f9c <HAL_InitTick+0x54>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <HAL_InitTick+0x58>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 f943 	bl	80011f2 <HAL_SYSTICK_Config>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00e      	b.n	8000f94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2b0f      	cmp	r3, #15
 8000f7a:	d80a      	bhi.n	8000f92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f84:	f000 f90b 	bl	800119e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f88:	4a06      	ldr	r2, [pc, #24]	@ (8000fa4 <HAL_InitTick+0x5c>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	e000      	b.n	8000f94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000020 	.word	0x20000020
 8000fa0:	20000028 	.word	0x20000028
 8000fa4:	20000024 	.word	0x20000024

08000fa8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fac:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <HAL_IncTick+0x20>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <HAL_IncTick+0x24>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	4a04      	ldr	r2, [pc, #16]	@ (8000fcc <HAL_IncTick+0x24>)
 8000fba:	6013      	str	r3, [r2, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	20000028 	.word	0x20000028
 8000fcc:	200004d0 	.word	0x200004d0

08000fd0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000fd4:	4b03      	ldr	r3, [pc, #12]	@ (8000fe4 <HAL_GetTick+0x14>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	200004d0 	.word	0x200004d0

08000fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <__NVIC_SetPriorityGrouping+0x44>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001004:	4013      	ands	r3, r2
 8001006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001010:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001014:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800101a:	4a04      	ldr	r2, [pc, #16]	@ (800102c <__NVIC_SetPriorityGrouping+0x44>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	60d3      	str	r3, [r2, #12]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001034:	4b04      	ldr	r3, [pc, #16]	@ (8001048 <__NVIC_GetPriorityGrouping+0x18>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	0a1b      	lsrs	r3, r3, #8
 800103a:	f003 0307 	and.w	r3, r3, #7
}
 800103e:	4618      	mov	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	2b00      	cmp	r3, #0
 800105c:	db0b      	blt.n	8001076 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	f003 021f 	and.w	r2, r3, #31
 8001064:	4907      	ldr	r1, [pc, #28]	@ (8001084 <__NVIC_EnableIRQ+0x38>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	095b      	lsrs	r3, r3, #5
 800106c:	2001      	movs	r0, #1
 800106e:	fa00 f202 	lsl.w	r2, r0, r2
 8001072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000e100 	.word	0xe000e100

08001088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	6039      	str	r1, [r7, #0]
 8001092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001098:	2b00      	cmp	r3, #0
 800109a:	db0a      	blt.n	80010b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	490c      	ldr	r1, [pc, #48]	@ (80010d4 <__NVIC_SetPriority+0x4c>)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	0112      	lsls	r2, r2, #4
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	440b      	add	r3, r1
 80010ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b0:	e00a      	b.n	80010c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4908      	ldr	r1, [pc, #32]	@ (80010d8 <__NVIC_SetPriority+0x50>)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	f003 030f 	and.w	r3, r3, #15
 80010be:	3b04      	subs	r3, #4
 80010c0:	0112      	lsls	r2, r2, #4
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	440b      	add	r3, r1
 80010c6:	761a      	strb	r2, [r3, #24]
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000e100 	.word	0xe000e100
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010dc:	b480      	push	{r7}
 80010de:	b089      	sub	sp, #36	@ 0x24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f1c3 0307 	rsb	r3, r3, #7
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	bf28      	it	cs
 80010fa:	2304      	movcs	r3, #4
 80010fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3304      	adds	r3, #4
 8001102:	2b06      	cmp	r3, #6
 8001104:	d902      	bls.n	800110c <NVIC_EncodePriority+0x30>
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3b03      	subs	r3, #3
 800110a:	e000      	b.n	800110e <NVIC_EncodePriority+0x32>
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43da      	mvns	r2, r3
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	401a      	ands	r2, r3
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001124:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	fa01 f303 	lsl.w	r3, r1, r3
 800112e:	43d9      	mvns	r1, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	4313      	orrs	r3, r2
         );
}
 8001136:	4618      	mov	r0, r3
 8001138:	3724      	adds	r7, #36	@ 0x24
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3b01      	subs	r3, #1
 8001150:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001154:	d301      	bcc.n	800115a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001156:	2301      	movs	r3, #1
 8001158:	e00f      	b.n	800117a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800115a:	4a0a      	ldr	r2, [pc, #40]	@ (8001184 <SysTick_Config+0x40>)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3b01      	subs	r3, #1
 8001160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001162:	210f      	movs	r1, #15
 8001164:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001168:	f7ff ff8e 	bl	8001088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800116c:	4b05      	ldr	r3, [pc, #20]	@ (8001184 <SysTick_Config+0x40>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001172:	4b04      	ldr	r3, [pc, #16]	@ (8001184 <SysTick_Config+0x40>)
 8001174:	2207      	movs	r2, #7
 8001176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	e000e010 	.word	0xe000e010

08001188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff ff29 	bl	8000fe8 <__NVIC_SetPriorityGrouping>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b086      	sub	sp, #24
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	60b9      	str	r1, [r7, #8]
 80011a8:	607a      	str	r2, [r7, #4]
 80011aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011b0:	f7ff ff3e 	bl	8001030 <__NVIC_GetPriorityGrouping>
 80011b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	68b9      	ldr	r1, [r7, #8]
 80011ba:	6978      	ldr	r0, [r7, #20]
 80011bc:	f7ff ff8e 	bl	80010dc <NVIC_EncodePriority>
 80011c0:	4602      	mov	r2, r0
 80011c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c6:	4611      	mov	r1, r2
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff5d 	bl	8001088 <__NVIC_SetPriority>
}
 80011ce:	bf00      	nop
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4603      	mov	r3, r0
 80011de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff31 	bl	800104c <__NVIC_EnableIRQ>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ffa2 	bl	8001144 <SysTick_Config>
 8001200:	4603      	mov	r3, r0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001218:	2b02      	cmp	r3, #2
 800121a:	d008      	beq.n	800122e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2204      	movs	r2, #4
 8001220:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e020      	b.n	8001270 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f022 020e 	bic.w	r2, r2, #14
 800123c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f022 0201 	bic.w	r2, r2, #1
 800124c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001256:	2101      	movs	r1, #1
 8001258:	fa01 f202 	lsl.w	r2, r1, r2
 800125c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2201      	movs	r2, #1
 8001262:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800126e:	2300      	movs	r3, #0
}
 8001270:	4618      	mov	r0, r3
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001284:	2300      	movs	r3, #0
 8001286:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800128e:	2b02      	cmp	r3, #2
 8001290:	d005      	beq.n	800129e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2204      	movs	r2, #4
 8001296:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	73fb      	strb	r3, [r7, #15]
 800129c:	e027      	b.n	80012ee <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 020e 	bic.w	r2, r2, #14
 80012ac:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0201 	bic.w	r2, r2, #1
 80012bc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012c6:	2101      	movs	r1, #1
 80012c8:	fa01 f202 	lsl.w	r2, r1, r2
 80012cc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	4798      	blx	r3
    } 
  }
  return status;
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b087      	sub	sp, #28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001306:	e154      	b.n	80015b2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	2101      	movs	r1, #1
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	fa01 f303 	lsl.w	r3, r1, r3
 8001314:	4013      	ands	r3, r2
 8001316:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2b00      	cmp	r3, #0
 800131c:	f000 8146 	beq.w	80015ac <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	2b01      	cmp	r3, #1
 800132a:	d005      	beq.n	8001338 <HAL_GPIO_Init+0x40>
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 0303 	and.w	r3, r3, #3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d130      	bne.n	800139a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	2203      	movs	r2, #3
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	4013      	ands	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	68da      	ldr	r2, [r3, #12]
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4313      	orrs	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800136e:	2201      	movs	r2, #1
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4013      	ands	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	091b      	lsrs	r3, r3, #4
 8001384:	f003 0201 	and.w	r2, r3, #1
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f003 0303 	and.w	r3, r3, #3
 80013a2:	2b03      	cmp	r3, #3
 80013a4:	d017      	beq.n	80013d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	2203      	movs	r2, #3
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	4013      	ands	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 0303 	and.w	r3, r3, #3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d123      	bne.n	800142a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	08da      	lsrs	r2, r3, #3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3208      	adds	r2, #8
 80013ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	220f      	movs	r2, #15
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43db      	mvns	r3, r3
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	4013      	ands	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	691a      	ldr	r2, [r3, #16]
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	f003 0307 	and.w	r3, r3, #7
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	4313      	orrs	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	08da      	lsrs	r2, r3, #3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3208      	adds	r2, #8
 8001424:	6939      	ldr	r1, [r7, #16]
 8001426:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	2203      	movs	r2, #3
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	4013      	ands	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 0203 	and.w	r2, r3, #3
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001466:	2b00      	cmp	r3, #0
 8001468:	f000 80a0 	beq.w	80015ac <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146c:	4b58      	ldr	r3, [pc, #352]	@ (80015d0 <HAL_GPIO_Init+0x2d8>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	4a57      	ldr	r2, [pc, #348]	@ (80015d0 <HAL_GPIO_Init+0x2d8>)
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	6193      	str	r3, [r2, #24]
 8001478:	4b55      	ldr	r3, [pc, #340]	@ (80015d0 <HAL_GPIO_Init+0x2d8>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001484:	4a53      	ldr	r2, [pc, #332]	@ (80015d4 <HAL_GPIO_Init+0x2dc>)
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	089b      	lsrs	r3, r3, #2
 800148a:	3302      	adds	r3, #2
 800148c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001490:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	220f      	movs	r2, #15
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4013      	ands	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80014ae:	d019      	beq.n	80014e4 <HAL_GPIO_Init+0x1ec>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a49      	ldr	r2, [pc, #292]	@ (80015d8 <HAL_GPIO_Init+0x2e0>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d013      	beq.n	80014e0 <HAL_GPIO_Init+0x1e8>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a48      	ldr	r2, [pc, #288]	@ (80015dc <HAL_GPIO_Init+0x2e4>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d00d      	beq.n	80014dc <HAL_GPIO_Init+0x1e4>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a47      	ldr	r2, [pc, #284]	@ (80015e0 <HAL_GPIO_Init+0x2e8>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d007      	beq.n	80014d8 <HAL_GPIO_Init+0x1e0>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a46      	ldr	r2, [pc, #280]	@ (80015e4 <HAL_GPIO_Init+0x2ec>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d101      	bne.n	80014d4 <HAL_GPIO_Init+0x1dc>
 80014d0:	2304      	movs	r3, #4
 80014d2:	e008      	b.n	80014e6 <HAL_GPIO_Init+0x1ee>
 80014d4:	2305      	movs	r3, #5
 80014d6:	e006      	b.n	80014e6 <HAL_GPIO_Init+0x1ee>
 80014d8:	2303      	movs	r3, #3
 80014da:	e004      	b.n	80014e6 <HAL_GPIO_Init+0x1ee>
 80014dc:	2302      	movs	r3, #2
 80014de:	e002      	b.n	80014e6 <HAL_GPIO_Init+0x1ee>
 80014e0:	2301      	movs	r3, #1
 80014e2:	e000      	b.n	80014e6 <HAL_GPIO_Init+0x1ee>
 80014e4:	2300      	movs	r3, #0
 80014e6:	697a      	ldr	r2, [r7, #20]
 80014e8:	f002 0203 	and.w	r2, r2, #3
 80014ec:	0092      	lsls	r2, r2, #2
 80014ee:	4093      	lsls	r3, r2
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014f6:	4937      	ldr	r1, [pc, #220]	@ (80015d4 <HAL_GPIO_Init+0x2dc>)
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	089b      	lsrs	r3, r3, #2
 80014fc:	3302      	adds	r3, #2
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001504:	4b38      	ldr	r3, [pc, #224]	@ (80015e8 <HAL_GPIO_Init+0x2f0>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	43db      	mvns	r3, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4013      	ands	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	4313      	orrs	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001528:	4a2f      	ldr	r2, [pc, #188]	@ (80015e8 <HAL_GPIO_Init+0x2f0>)
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800152e:	4b2e      	ldr	r3, [pc, #184]	@ (80015e8 <HAL_GPIO_Init+0x2f0>)
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	43db      	mvns	r3, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4313      	orrs	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001552:	4a25      	ldr	r2, [pc, #148]	@ (80015e8 <HAL_GPIO_Init+0x2f0>)
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001558:	4b23      	ldr	r3, [pc, #140]	@ (80015e8 <HAL_GPIO_Init+0x2f0>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	43db      	mvns	r3, r3
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4013      	ands	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4313      	orrs	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800157c:	4a1a      	ldr	r2, [pc, #104]	@ (80015e8 <HAL_GPIO_Init+0x2f0>)
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001582:	4b19      	ldr	r3, [pc, #100]	@ (80015e8 <HAL_GPIO_Init+0x2f0>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	43db      	mvns	r3, r3
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	4013      	ands	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015a6:	4a10      	ldr	r2, [pc, #64]	@ (80015e8 <HAL_GPIO_Init+0x2f0>)
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	3301      	adds	r3, #1
 80015b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	fa22 f303 	lsr.w	r3, r2, r3
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f47f aea3 	bne.w	8001308 <HAL_GPIO_Init+0x10>
  }
}
 80015c2:	bf00      	nop
 80015c4:	bf00      	nop
 80015c6:	371c      	adds	r7, #28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40010000 	.word	0x40010000
 80015d8:	48000400 	.word	0x48000400
 80015dc:	48000800 	.word	0x48000800
 80015e0:	48000c00 	.word	0x48000c00
 80015e4:	48001000 	.word	0x48001000
 80015e8:	40010400 	.word	0x40010400

080015ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	807b      	strh	r3, [r7, #2]
 80015f8:	4613      	mov	r3, r2
 80015fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015fc:	787b      	ldrb	r3, [r7, #1]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001602:	887a      	ldrh	r2, [r7, #2]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001608:	e002      	b.n	8001610 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800160a:	887a      	ldrh	r2, [r7, #2]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e081      	b.n	8001732 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d106      	bne.n	8001648 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff fa7c 	bl	8000b40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2224      	movs	r2, #36	@ 0x24
 800164c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f022 0201 	bic.w	r2, r2, #1
 800165e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800166c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800167c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d107      	bne.n	8001696 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	e006      	b.n	80016a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80016a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d104      	bne.n	80016b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	691a      	ldr	r2, [r3, #16]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	69d9      	ldr	r1, [r3, #28]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a1a      	ldr	r2, [r3, #32]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	430a      	orrs	r2, r1
 8001702:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f042 0201 	orr.w	r2, r2, #1
 8001712:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2220      	movs	r2, #32
 800171e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
 8001742:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b20      	cmp	r3, #32
 800174e:	d138      	bne.n	80017c2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001756:	2b01      	cmp	r3, #1
 8001758:	d101      	bne.n	800175e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800175a:	2302      	movs	r3, #2
 800175c:	e032      	b.n	80017c4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2201      	movs	r2, #1
 8001762:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2224      	movs	r2, #36	@ 0x24
 800176a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 0201 	bic.w	r2, r2, #1
 800177c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800178c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6819      	ldr	r1, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	430a      	orrs	r2, r1
 800179c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f042 0201 	orr.w	r2, r2, #1
 80017ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2220      	movs	r2, #32
 80017b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80017be:	2300      	movs	r3, #0
 80017c0:	e000      	b.n	80017c4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80017c2:	2302      	movs	r3, #2
  }
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b20      	cmp	r3, #32
 80017e4:	d139      	bne.n	800185a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d101      	bne.n	80017f4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80017f0:	2302      	movs	r3, #2
 80017f2:	e033      	b.n	800185c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2224      	movs	r2, #36	@ 0x24
 8001800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 0201 	bic.w	r2, r2, #1
 8001812:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001822:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	021b      	lsls	r3, r3, #8
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	4313      	orrs	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f042 0201 	orr.w	r2, r2, #1
 8001844:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2220      	movs	r2, #32
 800184a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	e000      	b.n	800185c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800185a:	2302      	movs	r3, #2
  }
}
 800185c:	4618      	mov	r0, r3
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800186a:	b08b      	sub	sp, #44	@ 0x2c
 800186c:	af06      	add	r7, sp, #24
 800186e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e0c4      	b.n	8001a04 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d106      	bne.n	8001894 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff fa80 	bl	8000d94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2203      	movs	r2, #3
 8001898:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f003 ffa0 	bl	80057e6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018a6:	2300      	movs	r3, #0
 80018a8:	73fb      	strb	r3, [r7, #15]
 80018aa:	e040      	b.n	800192e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	1c5a      	adds	r2, r3, #1
 80018b2:	4613      	mov	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4413      	add	r3, r2
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	440b      	add	r3, r1
 80018bc:	3301      	adds	r3, #1
 80018be:	2201      	movs	r2, #1
 80018c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	1c5a      	adds	r2, r3, #1
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	440b      	add	r3, r1
 80018d2:	7bfa      	ldrb	r2, [r7, #15]
 80018d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	1c5a      	adds	r2, r3, #1
 80018dc:	4613      	mov	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	440b      	add	r3, r1
 80018e6:	3303      	adds	r3, #3
 80018e8:	2200      	movs	r2, #0
 80018ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018ec:	7bfa      	ldrb	r2, [r7, #15]
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	4613      	mov	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	4413      	add	r3, r2
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	440b      	add	r3, r1
 80018fa:	3338      	adds	r3, #56	@ 0x38
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001900:	7bfa      	ldrb	r2, [r7, #15]
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	4613      	mov	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	440b      	add	r3, r1
 800190e:	333c      	adds	r3, #60	@ 0x3c
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001914:	7bfa      	ldrb	r2, [r7, #15]
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	440b      	add	r3, r1
 8001922:	3340      	adds	r3, #64	@ 0x40
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001928:	7bfb      	ldrb	r3, [r7, #15]
 800192a:	3301      	adds	r3, #1
 800192c:	73fb      	strb	r3, [r7, #15]
 800192e:	7bfa      	ldrb	r2, [r7, #15]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	429a      	cmp	r2, r3
 8001936:	d3b9      	bcc.n	80018ac <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001938:	2300      	movs	r3, #0
 800193a:	73fb      	strb	r3, [r7, #15]
 800193c:	e044      	b.n	80019c8 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800193e:	7bfa      	ldrb	r2, [r7, #15]
 8001940:	6879      	ldr	r1, [r7, #4]
 8001942:	4613      	mov	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	440b      	add	r3, r1
 800194c:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8001950:	2200      	movs	r2, #0
 8001952:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001954:	7bfa      	ldrb	r2, [r7, #15]
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	4613      	mov	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	440b      	add	r3, r1
 8001962:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001966:	7bfa      	ldrb	r2, [r7, #15]
 8001968:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800196a:	7bfa      	ldrb	r2, [r7, #15]
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	4613      	mov	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	440b      	add	r3, r1
 8001978:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001980:	7bfa      	ldrb	r2, [r7, #15]
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	4613      	mov	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	440b      	add	r3, r1
 800198e:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001996:	7bfa      	ldrb	r2, [r7, #15]
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	4613      	mov	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	440b      	add	r3, r1
 80019a4:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019ac:	7bfa      	ldrb	r2, [r7, #15]
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	4613      	mov	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	440b      	add	r3, r1
 80019ba:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
 80019c4:	3301      	adds	r3, #1
 80019c6:	73fb      	strb	r3, [r7, #15]
 80019c8:	7bfa      	ldrb	r2, [r7, #15]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d3b5      	bcc.n	800193e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	687e      	ldr	r6, [r7, #4]
 80019da:	466d      	mov	r5, sp
 80019dc:	f106 0410 	add.w	r4, r6, #16
 80019e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019e4:	6823      	ldr	r3, [r4, #0]
 80019e6:	602b      	str	r3, [r5, #0]
 80019e8:	1d33      	adds	r3, r6, #4
 80019ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019ec:	6838      	ldr	r0, [r7, #0]
 80019ee:	f003 ff15 	bl	800581c <USB_DevInit>

  hpcd->USB_Address = 0U;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a1c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d102      	bne.n	8001a32 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	f001 b823 	b.w	8002a78 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f000 817d 	beq.w	8001d42 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a48:	4bbc      	ldr	r3, [pc, #752]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 030c 	and.w	r3, r3, #12
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	d00c      	beq.n	8001a6e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a54:	4bb9      	ldr	r3, [pc, #740]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 030c 	and.w	r3, r3, #12
 8001a5c:	2b08      	cmp	r3, #8
 8001a5e:	d15c      	bne.n	8001b1a <HAL_RCC_OscConfig+0x10e>
 8001a60:	4bb6      	ldr	r3, [pc, #728]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a6c:	d155      	bne.n	8001b1a <HAL_RCC_OscConfig+0x10e>
 8001a6e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a72:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a76:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001a7a:	fa93 f3a3 	rbit	r3, r3
 8001a7e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a82:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a86:	fab3 f383 	clz	r3, r3
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	095b      	lsrs	r3, r3, #5
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d102      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x94>
 8001a9a:	4ba8      	ldr	r3, [pc, #672]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	e015      	b.n	8001acc <HAL_RCC_OscConfig+0xc0>
 8001aa0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001aa4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001aac:	fa93 f3a3 	rbit	r3, r3
 8001ab0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001ab4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ab8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001abc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001ac0:	fa93 f3a3 	rbit	r3, r3
 8001ac4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001ac8:	4b9c      	ldr	r3, [pc, #624]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001acc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ad0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001ad4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001ad8:	fa92 f2a2 	rbit	r2, r2
 8001adc:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001ae0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001ae4:	fab2 f282 	clz	r2, r2
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	f042 0220 	orr.w	r2, r2, #32
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	f002 021f 	and.w	r2, r2, #31
 8001af4:	2101      	movs	r1, #1
 8001af6:	fa01 f202 	lsl.w	r2, r1, r2
 8001afa:	4013      	ands	r3, r2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 811f 	beq.w	8001d40 <HAL_RCC_OscConfig+0x334>
 8001b02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f040 8116 	bne.w	8001d40 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	f000 bfaf 	b.w	8002a78 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b2a:	d106      	bne.n	8001b3a <HAL_RCC_OscConfig+0x12e>
 8001b2c:	4b83      	ldr	r3, [pc, #524]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a82      	ldr	r2, [pc, #520]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001b32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b36:	6013      	str	r3, [r2, #0]
 8001b38:	e036      	b.n	8001ba8 <HAL_RCC_OscConfig+0x19c>
 8001b3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10c      	bne.n	8001b64 <HAL_RCC_OscConfig+0x158>
 8001b4a:	4b7c      	ldr	r3, [pc, #496]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a7b      	ldr	r2, [pc, #492]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001b50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	4b79      	ldr	r3, [pc, #484]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a78      	ldr	r2, [pc, #480]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001b5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	e021      	b.n	8001ba8 <HAL_RCC_OscConfig+0x19c>
 8001b64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b68:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b74:	d10c      	bne.n	8001b90 <HAL_RCC_OscConfig+0x184>
 8001b76:	4b71      	ldr	r3, [pc, #452]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a70      	ldr	r2, [pc, #448]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001b7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	4b6e      	ldr	r3, [pc, #440]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a6d      	ldr	r2, [pc, #436]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001b88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	e00b      	b.n	8001ba8 <HAL_RCC_OscConfig+0x19c>
 8001b90:	4b6a      	ldr	r3, [pc, #424]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a69      	ldr	r2, [pc, #420]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001b96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b9a:	6013      	str	r3, [r2, #0]
 8001b9c:	4b67      	ldr	r3, [pc, #412]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a66      	ldr	r2, [pc, #408]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001ba2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ba6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ba8:	4b64      	ldr	r3, [pc, #400]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bac:	f023 020f 	bic.w	r2, r3, #15
 8001bb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bb4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	495f      	ldr	r1, [pc, #380]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d059      	beq.n	8001c86 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd2:	f7ff f9fd 	bl	8000fd0 <HAL_GetTick>
 8001bd6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bda:	e00a      	b.n	8001bf2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bdc:	f7ff f9f8 	bl	8000fd0 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b64      	cmp	r3, #100	@ 0x64
 8001bea:	d902      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	f000 bf43 	b.w	8002a78 <HAL_RCC_OscConfig+0x106c>
 8001bf2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bf6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001bfe:	fa93 f3a3 	rbit	r3, r3
 8001c02:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001c06:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0a:	fab3 f383 	clz	r3, r3
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	095b      	lsrs	r3, r3, #5
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d102      	bne.n	8001c24 <HAL_RCC_OscConfig+0x218>
 8001c1e:	4b47      	ldr	r3, [pc, #284]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	e015      	b.n	8001c50 <HAL_RCC_OscConfig+0x244>
 8001c24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c28:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001c30:	fa93 f3a3 	rbit	r3, r3
 8001c34:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001c38:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c3c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001c40:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001c44:	fa93 f3a3 	rbit	r3, r3
 8001c48:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001c4c:	4b3b      	ldr	r3, [pc, #236]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c50:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c54:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001c58:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001c5c:	fa92 f2a2 	rbit	r2, r2
 8001c60:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001c64:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001c68:	fab2 f282 	clz	r2, r2
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	f042 0220 	orr.w	r2, r2, #32
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	f002 021f 	and.w	r2, r2, #31
 8001c78:	2101      	movs	r1, #1
 8001c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0ab      	beq.n	8001bdc <HAL_RCC_OscConfig+0x1d0>
 8001c84:	e05d      	b.n	8001d42 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c86:	f7ff f9a3 	bl	8000fd0 <HAL_GetTick>
 8001c8a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c8e:	e00a      	b.n	8001ca6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c90:	f7ff f99e 	bl	8000fd0 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b64      	cmp	r3, #100	@ 0x64
 8001c9e:	d902      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	f000 bee9 	b.w	8002a78 <HAL_RCC_OscConfig+0x106c>
 8001ca6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001caa:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cae:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001cb2:	fa93 f3a3 	rbit	r3, r3
 8001cb6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001cba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cbe:	fab3 f383 	clz	r3, r3
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	095b      	lsrs	r3, r3, #5
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d102      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x2cc>
 8001cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	e015      	b.n	8001d04 <HAL_RCC_OscConfig+0x2f8>
 8001cd8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cdc:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001ce4:	fa93 f3a3 	rbit	r3, r3
 8001ce8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001cec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cf0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001cf4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001cf8:	fa93 f3a3 	rbit	r3, r3
 8001cfc:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001d00:	4b0e      	ldr	r3, [pc, #56]	@ (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d04:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d08:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001d0c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001d10:	fa92 f2a2 	rbit	r2, r2
 8001d14:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001d18:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001d1c:	fab2 f282 	clz	r2, r2
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	f042 0220 	orr.w	r2, r2, #32
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	f002 021f 	and.w	r2, r2, #31
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d32:	4013      	ands	r3, r2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1ab      	bne.n	8001c90 <HAL_RCC_OscConfig+0x284>
 8001d38:	e003      	b.n	8001d42 <HAL_RCC_OscConfig+0x336>
 8001d3a:	bf00      	nop
 8001d3c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 817d 	beq.w	8002052 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d58:	4ba6      	ldr	r3, [pc, #664]	@ (8001ff4 <HAL_RCC_OscConfig+0x5e8>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 030c 	and.w	r3, r3, #12
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d00b      	beq.n	8001d7c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d64:	4ba3      	ldr	r3, [pc, #652]	@ (8001ff4 <HAL_RCC_OscConfig+0x5e8>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 030c 	and.w	r3, r3, #12
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	d172      	bne.n	8001e56 <HAL_RCC_OscConfig+0x44a>
 8001d70:	4ba0      	ldr	r3, [pc, #640]	@ (8001ff4 <HAL_RCC_OscConfig+0x5e8>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d16c      	bne.n	8001e56 <HAL_RCC_OscConfig+0x44a>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d82:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001d86:	fa93 f3a3 	rbit	r3, r3
 8001d8a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001d8e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d92:	fab3 f383 	clz	r3, r3
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	095b      	lsrs	r3, r3, #5
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d102      	bne.n	8001dac <HAL_RCC_OscConfig+0x3a0>
 8001da6:	4b93      	ldr	r3, [pc, #588]	@ (8001ff4 <HAL_RCC_OscConfig+0x5e8>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	e013      	b.n	8001dd4 <HAL_RCC_OscConfig+0x3c8>
 8001dac:	2302      	movs	r3, #2
 8001dae:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db2:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001db6:	fa93 f3a3 	rbit	r3, r3
 8001dba:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001dc4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001dc8:	fa93 f3a3 	rbit	r3, r3
 8001dcc:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001dd0:	4b88      	ldr	r3, [pc, #544]	@ (8001ff4 <HAL_RCC_OscConfig+0x5e8>)
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001dda:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001dde:	fa92 f2a2 	rbit	r2, r2
 8001de2:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001de6:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001dea:	fab2 f282 	clz	r2, r2
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	f042 0220 	orr.w	r2, r2, #32
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	f002 021f 	and.w	r2, r2, #31
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00a      	beq.n	8001e1c <HAL_RCC_OscConfig+0x410>
 8001e06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d002      	beq.n	8001e1c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	f000 be2e 	b.w	8002a78 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1c:	4b75      	ldr	r3, [pc, #468]	@ (8001ff4 <HAL_RCC_OscConfig+0x5e8>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e28:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	21f8      	movs	r1, #248	@ 0xf8
 8001e32:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e36:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001e3a:	fa91 f1a1 	rbit	r1, r1
 8001e3e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001e42:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001e46:	fab1 f181 	clz	r1, r1
 8001e4a:	b2c9      	uxtb	r1, r1
 8001e4c:	408b      	lsls	r3, r1
 8001e4e:	4969      	ldr	r1, [pc, #420]	@ (8001ff4 <HAL_RCC_OscConfig+0x5e8>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e54:	e0fd      	b.n	8002052 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 8088 	beq.w	8001f78 <HAL_RCC_OscConfig+0x56c>
 8001e68:	2301      	movs	r3, #1
 8001e6a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001e72:	fa93 f3a3 	rbit	r3, r3
 8001e76:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001e7a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e7e:	fab3 f383 	clz	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e88:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	461a      	mov	r2, r3
 8001e90:	2301      	movs	r3, #1
 8001e92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e94:	f7ff f89c 	bl	8000fd0 <HAL_GetTick>
 8001e98:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9c:	e00a      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e9e:	f7ff f897 	bl	8000fd0 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d902      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	f000 bde2 	b.w	8002a78 <HAL_RCC_OscConfig+0x106c>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eba:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001ebe:	fa93 f3a3 	rbit	r3, r3
 8001ec2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001ec6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eca:	fab3 f383 	clz	r3, r3
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	095b      	lsrs	r3, r3, #5
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d102      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x4d8>
 8001ede:	4b45      	ldr	r3, [pc, #276]	@ (8001ff4 <HAL_RCC_OscConfig+0x5e8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	e013      	b.n	8001f0c <HAL_RCC_OscConfig+0x500>
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eea:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001eee:	fa93 f3a3 	rbit	r3, r3
 8001ef2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001efc:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001f00:	fa93 f3a3 	rbit	r3, r3
 8001f04:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001f08:	4b3a      	ldr	r3, [pc, #232]	@ (8001ff4 <HAL_RCC_OscConfig+0x5e8>)
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001f12:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001f16:	fa92 f2a2 	rbit	r2, r2
 8001f1a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001f1e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001f22:	fab2 f282 	clz	r2, r2
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	f042 0220 	orr.w	r2, r2, #32
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	f002 021f 	and.w	r2, r2, #31
 8001f32:	2101      	movs	r1, #1
 8001f34:	fa01 f202 	lsl.w	r2, r1, r2
 8001f38:	4013      	ands	r3, r2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0af      	beq.n	8001e9e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3e:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff4 <HAL_RCC_OscConfig+0x5e8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	21f8      	movs	r1, #248	@ 0xf8
 8001f54:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f58:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001f5c:	fa91 f1a1 	rbit	r1, r1
 8001f60:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001f64:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001f68:	fab1 f181 	clz	r1, r1
 8001f6c:	b2c9      	uxtb	r1, r1
 8001f6e:	408b      	lsls	r3, r1
 8001f70:	4920      	ldr	r1, [pc, #128]	@ (8001ff4 <HAL_RCC_OscConfig+0x5e8>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	600b      	str	r3, [r1, #0]
 8001f76:	e06c      	b.n	8002052 <HAL_RCC_OscConfig+0x646>
 8001f78:	2301      	movs	r3, #1
 8001f7a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001f82:	fa93 f3a3 	rbit	r3, r3
 8001f86:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001f8a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f8e:	fab3 f383 	clz	r3, r3
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f98:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa4:	f7ff f814 	bl	8000fd0 <HAL_GetTick>
 8001fa8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fac:	e00a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fae:	f7ff f80f 	bl	8000fd0 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d902      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	f000 bd5a 	b.w	8002a78 <HAL_RCC_OscConfig+0x106c>
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fca:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001fce:	fa93 f3a3 	rbit	r3, r3
 8001fd2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001fd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fda:	fab3 f383 	clz	r3, r3
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	095b      	lsrs	r3, r3, #5
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d104      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x5ec>
 8001fee:	4b01      	ldr	r3, [pc, #4]	@ (8001ff4 <HAL_RCC_OscConfig+0x5e8>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	e015      	b.n	8002020 <HAL_RCC_OscConfig+0x614>
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002002:	fa93 f3a3 	rbit	r3, r3
 8002006:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800200a:	2302      	movs	r3, #2
 800200c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002010:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002014:	fa93 f3a3 	rbit	r3, r3
 8002018:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800201c:	4bc8      	ldr	r3, [pc, #800]	@ (8002340 <HAL_RCC_OscConfig+0x934>)
 800201e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002020:	2202      	movs	r2, #2
 8002022:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002026:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800202a:	fa92 f2a2 	rbit	r2, r2
 800202e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002032:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002036:	fab2 f282 	clz	r2, r2
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	f042 0220 	orr.w	r2, r2, #32
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	f002 021f 	and.w	r2, r2, #31
 8002046:	2101      	movs	r1, #1
 8002048:	fa01 f202 	lsl.w	r2, r1, r2
 800204c:	4013      	ands	r3, r2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1ad      	bne.n	8001fae <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002052:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002056:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 8110 	beq.w	8002288 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002068:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800206c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d079      	beq.n	800216c <HAL_RCC_OscConfig+0x760>
 8002078:	2301      	movs	r3, #1
 800207a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002082:	fa93 f3a3 	rbit	r3, r3
 8002086:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800208a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800208e:	fab3 f383 	clz	r3, r3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	461a      	mov	r2, r3
 8002096:	4bab      	ldr	r3, [pc, #684]	@ (8002344 <HAL_RCC_OscConfig+0x938>)
 8002098:	4413      	add	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	461a      	mov	r2, r3
 800209e:	2301      	movs	r3, #1
 80020a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a2:	f7fe ff95 	bl	8000fd0 <HAL_GetTick>
 80020a6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020aa:	e00a      	b.n	80020c2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ac:	f7fe ff90 	bl	8000fd0 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d902      	bls.n	80020c2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	f000 bcdb 	b.w	8002a78 <HAL_RCC_OscConfig+0x106c>
 80020c2:	2302      	movs	r3, #2
 80020c4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80020cc:	fa93 f3a3 	rbit	r3, r3
 80020d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80020d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80020dc:	2202      	movs	r2, #2
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	fa93 f2a3 	rbit	r2, r3
 80020ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002100:	2202      	movs	r2, #2
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	fa93 f2a3 	rbit	r2, r3
 8002112:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002116:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800211a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800211c:	4b88      	ldr	r3, [pc, #544]	@ (8002340 <HAL_RCC_OscConfig+0x934>)
 800211e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002120:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002124:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002128:	2102      	movs	r1, #2
 800212a:	6019      	str	r1, [r3, #0]
 800212c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002130:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	fa93 f1a3 	rbit	r1, r3
 800213a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800213e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002142:	6019      	str	r1, [r3, #0]
  return result;
 8002144:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002148:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	fab3 f383 	clz	r3, r3
 8002152:	b2db      	uxtb	r3, r3
 8002154:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002158:	b2db      	uxtb	r3, r3
 800215a:	f003 031f 	and.w	r3, r3, #31
 800215e:	2101      	movs	r1, #1
 8002160:	fa01 f303 	lsl.w	r3, r1, r3
 8002164:	4013      	ands	r3, r2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0a0      	beq.n	80020ac <HAL_RCC_OscConfig+0x6a0>
 800216a:	e08d      	b.n	8002288 <HAL_RCC_OscConfig+0x87c>
 800216c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002170:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002174:	2201      	movs	r2, #1
 8002176:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800217c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	fa93 f2a3 	rbit	r2, r3
 8002186:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800218a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800218e:	601a      	str	r2, [r3, #0]
  return result;
 8002190:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002194:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002198:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800219a:	fab3 f383 	clz	r3, r3
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	461a      	mov	r2, r3
 80021a2:	4b68      	ldr	r3, [pc, #416]	@ (8002344 <HAL_RCC_OscConfig+0x938>)
 80021a4:	4413      	add	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	461a      	mov	r2, r3
 80021aa:	2300      	movs	r3, #0
 80021ac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ae:	f7fe ff0f 	bl	8000fd0 <HAL_GetTick>
 80021b2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b6:	e00a      	b.n	80021ce <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021b8:	f7fe ff0a 	bl	8000fd0 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d902      	bls.n	80021ce <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	f000 bc55 	b.w	8002a78 <HAL_RCC_OscConfig+0x106c>
 80021ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80021d6:	2202      	movs	r2, #2
 80021d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021de:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	fa93 f2a3 	rbit	r2, r3
 80021e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80021fa:	2202      	movs	r2, #2
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002202:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	fa93 f2a3 	rbit	r2, r3
 800220c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002210:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800221a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800221e:	2202      	movs	r2, #2
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002226:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	fa93 f2a3 	rbit	r2, r3
 8002230:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002234:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002238:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800223a:	4b41      	ldr	r3, [pc, #260]	@ (8002340 <HAL_RCC_OscConfig+0x934>)
 800223c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800223e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002242:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002246:	2102      	movs	r1, #2
 8002248:	6019      	str	r1, [r3, #0]
 800224a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800224e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	fa93 f1a3 	rbit	r1, r3
 8002258:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800225c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002260:	6019      	str	r1, [r3, #0]
  return result;
 8002262:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002266:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	fab3 f383 	clz	r3, r3
 8002270:	b2db      	uxtb	r3, r3
 8002272:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002276:	b2db      	uxtb	r3, r3
 8002278:	f003 031f 	and.w	r3, r3, #31
 800227c:	2101      	movs	r1, #1
 800227e:	fa01 f303 	lsl.w	r3, r1, r3
 8002282:	4013      	ands	r3, r2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d197      	bne.n	80021b8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002288:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800228c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 81a1 	beq.w	80025e0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800229e:	2300      	movs	r3, #0
 80022a0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022a4:	4b26      	ldr	r3, [pc, #152]	@ (8002340 <HAL_RCC_OscConfig+0x934>)
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d116      	bne.n	80022de <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b0:	4b23      	ldr	r3, [pc, #140]	@ (8002340 <HAL_RCC_OscConfig+0x934>)
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	4a22      	ldr	r2, [pc, #136]	@ (8002340 <HAL_RCC_OscConfig+0x934>)
 80022b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022ba:	61d3      	str	r3, [r2, #28]
 80022bc:	4b20      	ldr	r3, [pc, #128]	@ (8002340 <HAL_RCC_OscConfig+0x934>)
 80022be:	69db      	ldr	r3, [r3, #28]
 80022c0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80022c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80022d6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80022d8:	2301      	movs	r3, #1
 80022da:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022de:	4b1a      	ldr	r3, [pc, #104]	@ (8002348 <HAL_RCC_OscConfig+0x93c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d11a      	bne.n	8002320 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ea:	4b17      	ldr	r3, [pc, #92]	@ (8002348 <HAL_RCC_OscConfig+0x93c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a16      	ldr	r2, [pc, #88]	@ (8002348 <HAL_RCC_OscConfig+0x93c>)
 80022f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022f4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022f6:	f7fe fe6b 	bl	8000fd0 <HAL_GetTick>
 80022fa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fe:	e009      	b.n	8002314 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002300:	f7fe fe66 	bl	8000fd0 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b64      	cmp	r3, #100	@ 0x64
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e3b1      	b.n	8002a78 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002314:	4b0c      	ldr	r3, [pc, #48]	@ (8002348 <HAL_RCC_OscConfig+0x93c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0ef      	beq.n	8002300 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002320:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002324:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d10d      	bne.n	800234c <HAL_RCC_OscConfig+0x940>
 8002330:	4b03      	ldr	r3, [pc, #12]	@ (8002340 <HAL_RCC_OscConfig+0x934>)
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	4a02      	ldr	r2, [pc, #8]	@ (8002340 <HAL_RCC_OscConfig+0x934>)
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	6213      	str	r3, [r2, #32]
 800233c:	e03c      	b.n	80023b8 <HAL_RCC_OscConfig+0x9ac>
 800233e:	bf00      	nop
 8002340:	40021000 	.word	0x40021000
 8002344:	10908120 	.word	0x10908120
 8002348:	40007000 	.word	0x40007000
 800234c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002350:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10c      	bne.n	8002376 <HAL_RCC_OscConfig+0x96a>
 800235c:	4bc1      	ldr	r3, [pc, #772]	@ (8002664 <HAL_RCC_OscConfig+0xc58>)
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	4ac0      	ldr	r2, [pc, #768]	@ (8002664 <HAL_RCC_OscConfig+0xc58>)
 8002362:	f023 0301 	bic.w	r3, r3, #1
 8002366:	6213      	str	r3, [r2, #32]
 8002368:	4bbe      	ldr	r3, [pc, #760]	@ (8002664 <HAL_RCC_OscConfig+0xc58>)
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	4abd      	ldr	r2, [pc, #756]	@ (8002664 <HAL_RCC_OscConfig+0xc58>)
 800236e:	f023 0304 	bic.w	r3, r3, #4
 8002372:	6213      	str	r3, [r2, #32]
 8002374:	e020      	b.n	80023b8 <HAL_RCC_OscConfig+0x9ac>
 8002376:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800237a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	2b05      	cmp	r3, #5
 8002384:	d10c      	bne.n	80023a0 <HAL_RCC_OscConfig+0x994>
 8002386:	4bb7      	ldr	r3, [pc, #732]	@ (8002664 <HAL_RCC_OscConfig+0xc58>)
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	4ab6      	ldr	r2, [pc, #728]	@ (8002664 <HAL_RCC_OscConfig+0xc58>)
 800238c:	f043 0304 	orr.w	r3, r3, #4
 8002390:	6213      	str	r3, [r2, #32]
 8002392:	4bb4      	ldr	r3, [pc, #720]	@ (8002664 <HAL_RCC_OscConfig+0xc58>)
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	4ab3      	ldr	r2, [pc, #716]	@ (8002664 <HAL_RCC_OscConfig+0xc58>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	6213      	str	r3, [r2, #32]
 800239e:	e00b      	b.n	80023b8 <HAL_RCC_OscConfig+0x9ac>
 80023a0:	4bb0      	ldr	r3, [pc, #704]	@ (8002664 <HAL_RCC_OscConfig+0xc58>)
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	4aaf      	ldr	r2, [pc, #700]	@ (8002664 <HAL_RCC_OscConfig+0xc58>)
 80023a6:	f023 0301 	bic.w	r3, r3, #1
 80023aa:	6213      	str	r3, [r2, #32]
 80023ac:	4bad      	ldr	r3, [pc, #692]	@ (8002664 <HAL_RCC_OscConfig+0xc58>)
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	4aac      	ldr	r2, [pc, #688]	@ (8002664 <HAL_RCC_OscConfig+0xc58>)
 80023b2:	f023 0304 	bic.w	r3, r3, #4
 80023b6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 8081 	beq.w	80024cc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ca:	f7fe fe01 	bl	8000fd0 <HAL_GetTick>
 80023ce:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d2:	e00b      	b.n	80023ec <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023d4:	f7fe fdfc 	bl	8000fd0 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e345      	b.n	8002a78 <HAL_RCC_OscConfig+0x106c>
 80023ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80023f4:	2202      	movs	r2, #2
 80023f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023fc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	fa93 f2a3 	rbit	r2, r3
 8002406:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800240a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002414:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002418:	2202      	movs	r2, #2
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002420:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	fa93 f2a3 	rbit	r2, r3
 800242a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800242e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002432:	601a      	str	r2, [r3, #0]
  return result;
 8002434:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002438:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800243c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243e:	fab3 f383 	clz	r3, r3
 8002442:	b2db      	uxtb	r3, r3
 8002444:	095b      	lsrs	r3, r3, #5
 8002446:	b2db      	uxtb	r3, r3
 8002448:	f043 0302 	orr.w	r3, r3, #2
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d102      	bne.n	8002458 <HAL_RCC_OscConfig+0xa4c>
 8002452:	4b84      	ldr	r3, [pc, #528]	@ (8002664 <HAL_RCC_OscConfig+0xc58>)
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	e013      	b.n	8002480 <HAL_RCC_OscConfig+0xa74>
 8002458:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800245c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002460:	2202      	movs	r2, #2
 8002462:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002464:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002468:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	fa93 f2a3 	rbit	r2, r3
 8002472:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002476:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	4b79      	ldr	r3, [pc, #484]	@ (8002664 <HAL_RCC_OscConfig+0xc58>)
 800247e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002480:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002484:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002488:	2102      	movs	r1, #2
 800248a:	6011      	str	r1, [r2, #0]
 800248c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002490:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002494:	6812      	ldr	r2, [r2, #0]
 8002496:	fa92 f1a2 	rbit	r1, r2
 800249a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800249e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80024a2:	6011      	str	r1, [r2, #0]
  return result;
 80024a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024a8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80024ac:	6812      	ldr	r2, [r2, #0]
 80024ae:	fab2 f282 	clz	r2, r2
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	f002 021f 	and.w	r2, r2, #31
 80024be:	2101      	movs	r1, #1
 80024c0:	fa01 f202 	lsl.w	r2, r1, r2
 80024c4:	4013      	ands	r3, r2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d084      	beq.n	80023d4 <HAL_RCC_OscConfig+0x9c8>
 80024ca:	e07f      	b.n	80025cc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024cc:	f7fe fd80 	bl	8000fd0 <HAL_GetTick>
 80024d0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d4:	e00b      	b.n	80024ee <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024d6:	f7fe fd7b 	bl	8000fd0 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e2c4      	b.n	8002a78 <HAL_RCC_OscConfig+0x106c>
 80024ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80024f6:	2202      	movs	r2, #2
 80024f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024fe:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	fa93 f2a3 	rbit	r2, r3
 8002508:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800250c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002516:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800251a:	2202      	movs	r2, #2
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002522:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	fa93 f2a3 	rbit	r2, r3
 800252c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002530:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002534:	601a      	str	r2, [r3, #0]
  return result;
 8002536:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800253a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800253e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002540:	fab3 f383 	clz	r3, r3
 8002544:	b2db      	uxtb	r3, r3
 8002546:	095b      	lsrs	r3, r3, #5
 8002548:	b2db      	uxtb	r3, r3
 800254a:	f043 0302 	orr.w	r3, r3, #2
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d102      	bne.n	800255a <HAL_RCC_OscConfig+0xb4e>
 8002554:	4b43      	ldr	r3, [pc, #268]	@ (8002664 <HAL_RCC_OscConfig+0xc58>)
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	e013      	b.n	8002582 <HAL_RCC_OscConfig+0xb76>
 800255a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800255e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002562:	2202      	movs	r2, #2
 8002564:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002566:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800256a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	fa93 f2a3 	rbit	r2, r3
 8002574:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002578:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	4b39      	ldr	r3, [pc, #228]	@ (8002664 <HAL_RCC_OscConfig+0xc58>)
 8002580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002582:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002586:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800258a:	2102      	movs	r1, #2
 800258c:	6011      	str	r1, [r2, #0]
 800258e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002592:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	fa92 f1a2 	rbit	r1, r2
 800259c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025a0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80025a4:	6011      	str	r1, [r2, #0]
  return result;
 80025a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025aa:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	fab2 f282 	clz	r2, r2
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	f002 021f 	and.w	r2, r2, #31
 80025c0:	2101      	movs	r1, #1
 80025c2:	fa01 f202 	lsl.w	r2, r1, r2
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d184      	bne.n	80024d6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025cc:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d105      	bne.n	80025e0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d4:	4b23      	ldr	r3, [pc, #140]	@ (8002664 <HAL_RCC_OscConfig+0xc58>)
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	4a22      	ldr	r2, [pc, #136]	@ (8002664 <HAL_RCC_OscConfig+0xc58>)
 80025da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025de:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 8242 	beq.w	8002a76 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002664 <HAL_RCC_OscConfig+0xc58>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f003 030c 	and.w	r3, r3, #12
 80025fa:	2b08      	cmp	r3, #8
 80025fc:	f000 8213 	beq.w	8002a26 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002600:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002604:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	2b02      	cmp	r3, #2
 800260e:	f040 8162 	bne.w	80028d6 <HAL_RCC_OscConfig+0xeca>
 8002612:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002616:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800261a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800261e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002620:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002624:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	fa93 f2a3 	rbit	r2, r3
 800262e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002632:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002636:	601a      	str	r2, [r3, #0]
  return result;
 8002638:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800263c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002640:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002642:	fab3 f383 	clz	r3, r3
 8002646:	b2db      	uxtb	r3, r3
 8002648:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800264c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	461a      	mov	r2, r3
 8002654:	2300      	movs	r3, #0
 8002656:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002658:	f7fe fcba 	bl	8000fd0 <HAL_GetTick>
 800265c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002660:	e00c      	b.n	800267c <HAL_RCC_OscConfig+0xc70>
 8002662:	bf00      	nop
 8002664:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002668:	f7fe fcb2 	bl	8000fd0 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e1fd      	b.n	8002a78 <HAL_RCC_OscConfig+0x106c>
 800267c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002680:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002684:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002688:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800268e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	fa93 f2a3 	rbit	r2, r3
 8002698:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800269c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80026a0:	601a      	str	r2, [r3, #0]
  return result;
 80026a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80026aa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ac:	fab3 f383 	clz	r3, r3
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	095b      	lsrs	r3, r3, #5
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d102      	bne.n	80026c6 <HAL_RCC_OscConfig+0xcba>
 80026c0:	4bb0      	ldr	r3, [pc, #704]	@ (8002984 <HAL_RCC_OscConfig+0xf78>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	e027      	b.n	8002716 <HAL_RCC_OscConfig+0xd0a>
 80026c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ca:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80026ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	fa93 f2a3 	rbit	r2, r3
 80026e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80026f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026fe:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	fa93 f2a3 	rbit	r2, r3
 8002708:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800270c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	4b9c      	ldr	r3, [pc, #624]	@ (8002984 <HAL_RCC_OscConfig+0xf78>)
 8002714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002716:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800271a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800271e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002722:	6011      	str	r1, [r2, #0]
 8002724:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002728:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	fa92 f1a2 	rbit	r1, r2
 8002732:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002736:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800273a:	6011      	str	r1, [r2, #0]
  return result;
 800273c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002740:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002744:	6812      	ldr	r2, [r2, #0]
 8002746:	fab2 f282 	clz	r2, r2
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	f042 0220 	orr.w	r2, r2, #32
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	f002 021f 	and.w	r2, r2, #31
 8002756:	2101      	movs	r1, #1
 8002758:	fa01 f202 	lsl.w	r2, r1, r2
 800275c:	4013      	ands	r3, r2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d182      	bne.n	8002668 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002762:	4b88      	ldr	r3, [pc, #544]	@ (8002984 <HAL_RCC_OscConfig+0xf78>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800276a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800276e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002776:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800277a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	430b      	orrs	r3, r1
 8002784:	497f      	ldr	r1, [pc, #508]	@ (8002984 <HAL_RCC_OscConfig+0xf78>)
 8002786:	4313      	orrs	r3, r2
 8002788:	604b      	str	r3, [r1, #4]
 800278a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800278e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002792:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002796:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002798:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800279c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	fa93 f2a3 	rbit	r2, r3
 80027a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027aa:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80027ae:	601a      	str	r2, [r3, #0]
  return result;
 80027b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80027b8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ba:	fab3 f383 	clz	r3, r3
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80027c4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	461a      	mov	r2, r3
 80027cc:	2301      	movs	r3, #1
 80027ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d0:	f7fe fbfe 	bl	8000fd0 <HAL_GetTick>
 80027d4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027d8:	e009      	b.n	80027ee <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027da:	f7fe fbf9 	bl	8000fd0 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e144      	b.n	8002a78 <HAL_RCC_OscConfig+0x106c>
 80027ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80027f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002800:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	fa93 f2a3 	rbit	r2, r3
 800280a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800280e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002812:	601a      	str	r2, [r3, #0]
  return result;
 8002814:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002818:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800281c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800281e:	fab3 f383 	clz	r3, r3
 8002822:	b2db      	uxtb	r3, r3
 8002824:	095b      	lsrs	r3, r3, #5
 8002826:	b2db      	uxtb	r3, r3
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b01      	cmp	r3, #1
 8002830:	d102      	bne.n	8002838 <HAL_RCC_OscConfig+0xe2c>
 8002832:	4b54      	ldr	r3, [pc, #336]	@ (8002984 <HAL_RCC_OscConfig+0xf78>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	e027      	b.n	8002888 <HAL_RCC_OscConfig+0xe7c>
 8002838:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800283c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002840:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002844:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800284a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	fa93 f2a3 	rbit	r2, r3
 8002854:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002858:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002862:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002866:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002870:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	fa93 f2a3 	rbit	r2, r3
 800287a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800287e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	4b3f      	ldr	r3, [pc, #252]	@ (8002984 <HAL_RCC_OscConfig+0xf78>)
 8002886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002888:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800288c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002890:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002894:	6011      	str	r1, [r2, #0]
 8002896:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800289a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800289e:	6812      	ldr	r2, [r2, #0]
 80028a0:	fa92 f1a2 	rbit	r1, r2
 80028a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028a8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80028ac:	6011      	str	r1, [r2, #0]
  return result;
 80028ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028b2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80028b6:	6812      	ldr	r2, [r2, #0]
 80028b8:	fab2 f282 	clz	r2, r2
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	f042 0220 	orr.w	r2, r2, #32
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	f002 021f 	and.w	r2, r2, #31
 80028c8:	2101      	movs	r1, #1
 80028ca:	fa01 f202 	lsl.w	r2, r1, r2
 80028ce:	4013      	ands	r3, r2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d082      	beq.n	80027da <HAL_RCC_OscConfig+0xdce>
 80028d4:	e0cf      	b.n	8002a76 <HAL_RCC_OscConfig+0x106a>
 80028d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028da:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80028de:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80028e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	fa93 f2a3 	rbit	r2, r3
 80028f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80028fa:	601a      	str	r2, [r3, #0]
  return result;
 80028fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002900:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002904:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002906:	fab3 f383 	clz	r3, r3
 800290a:	b2db      	uxtb	r3, r3
 800290c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002910:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	461a      	mov	r2, r3
 8002918:	2300      	movs	r3, #0
 800291a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291c:	f7fe fb58 	bl	8000fd0 <HAL_GetTick>
 8002920:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002924:	e009      	b.n	800293a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002926:	f7fe fb53 	bl	8000fd0 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e09e      	b.n	8002a78 <HAL_RCC_OscConfig+0x106c>
 800293a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800293e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002942:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002946:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002948:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800294c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	fa93 f2a3 	rbit	r2, r3
 8002956:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800295a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800295e:	601a      	str	r2, [r3, #0]
  return result;
 8002960:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002964:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002968:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800296a:	fab3 f383 	clz	r3, r3
 800296e:	b2db      	uxtb	r3, r3
 8002970:	095b      	lsrs	r3, r3, #5
 8002972:	b2db      	uxtb	r3, r3
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b01      	cmp	r3, #1
 800297c:	d104      	bne.n	8002988 <HAL_RCC_OscConfig+0xf7c>
 800297e:	4b01      	ldr	r3, [pc, #4]	@ (8002984 <HAL_RCC_OscConfig+0xf78>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	e029      	b.n	80029d8 <HAL_RCC_OscConfig+0xfcc>
 8002984:	40021000 	.word	0x40021000
 8002988:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800298c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002990:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002994:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002996:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800299a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	fa93 f2a3 	rbit	r2, r3
 80029a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80029b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	fa93 f2a3 	rbit	r2, r3
 80029ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ce:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002a84 <HAL_RCC_OscConfig+0x1078>)
 80029d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029dc:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80029e0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80029e4:	6011      	str	r1, [r2, #0]
 80029e6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029ea:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80029ee:	6812      	ldr	r2, [r2, #0]
 80029f0:	fa92 f1a2 	rbit	r1, r2
 80029f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029f8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80029fc:	6011      	str	r1, [r2, #0]
  return result;
 80029fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a02:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002a06:	6812      	ldr	r2, [r2, #0]
 8002a08:	fab2 f282 	clz	r2, r2
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	f042 0220 	orr.w	r2, r2, #32
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	f002 021f 	and.w	r2, r2, #31
 8002a18:	2101      	movs	r1, #1
 8002a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a1e:	4013      	ands	r3, r2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d180      	bne.n	8002926 <HAL_RCC_OscConfig+0xf1a>
 8002a24:	e027      	b.n	8002a76 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e01e      	b.n	8002a78 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a3a:	4b12      	ldr	r3, [pc, #72]	@ (8002a84 <HAL_RCC_OscConfig+0x1078>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a42:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002a46:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d10b      	bne.n	8002a72 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002a5a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002a5e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002a62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a66:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d001      	beq.n	8002a76 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40021000 	.word	0x40021000

08002a88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b09e      	sub	sp, #120	@ 0x78
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e162      	b.n	8002d66 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa0:	4b90      	ldr	r3, [pc, #576]	@ (8002ce4 <HAL_RCC_ClockConfig+0x25c>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d910      	bls.n	8002ad0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aae:	4b8d      	ldr	r3, [pc, #564]	@ (8002ce4 <HAL_RCC_ClockConfig+0x25c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f023 0207 	bic.w	r2, r3, #7
 8002ab6:	498b      	ldr	r1, [pc, #556]	@ (8002ce4 <HAL_RCC_ClockConfig+0x25c>)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002abe:	4b89      	ldr	r3, [pc, #548]	@ (8002ce4 <HAL_RCC_ClockConfig+0x25c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d001      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e14a      	b.n	8002d66 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002adc:	4b82      	ldr	r3, [pc, #520]	@ (8002ce8 <HAL_RCC_ClockConfig+0x260>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	497f      	ldr	r1, [pc, #508]	@ (8002ce8 <HAL_RCC_ClockConfig+0x260>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 80dc 	beq.w	8002cb4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d13c      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xf6>
 8002b04:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b08:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b0c:	fa93 f3a3 	rbit	r3, r3
 8002b10:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002b12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b14:	fab3 f383 	clz	r3, r3
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	095b      	lsrs	r3, r3, #5
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	f043 0301 	orr.w	r3, r3, #1
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d102      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xa6>
 8002b28:	4b6f      	ldr	r3, [pc, #444]	@ (8002ce8 <HAL_RCC_ClockConfig+0x260>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	e00f      	b.n	8002b4e <HAL_RCC_ClockConfig+0xc6>
 8002b2e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b32:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b36:	fa93 f3a3 	rbit	r3, r3
 8002b3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002b3c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b40:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b44:	fa93 f3a3 	rbit	r3, r3
 8002b48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b4a:	4b67      	ldr	r3, [pc, #412]	@ (8002ce8 <HAL_RCC_ClockConfig+0x260>)
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b52:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002b54:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002b56:	fa92 f2a2 	rbit	r2, r2
 8002b5a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002b5c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002b5e:	fab2 f282 	clz	r2, r2
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	f042 0220 	orr.w	r2, r2, #32
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	f002 021f 	and.w	r2, r2, #31
 8002b6e:	2101      	movs	r1, #1
 8002b70:	fa01 f202 	lsl.w	r2, r1, r2
 8002b74:	4013      	ands	r3, r2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d17b      	bne.n	8002c72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e0f3      	b.n	8002d66 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d13c      	bne.n	8002c00 <HAL_RCC_ClockConfig+0x178>
 8002b86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b8a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b8e:	fa93 f3a3 	rbit	r3, r3
 8002b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002b94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b96:	fab3 f383 	clz	r3, r3
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	095b      	lsrs	r3, r3, #5
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	f043 0301 	orr.w	r3, r3, #1
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d102      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0x128>
 8002baa:	4b4f      	ldr	r3, [pc, #316]	@ (8002ce8 <HAL_RCC_ClockConfig+0x260>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	e00f      	b.n	8002bd0 <HAL_RCC_ClockConfig+0x148>
 8002bb0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bb4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bb8:	fa93 f3a3 	rbit	r3, r3
 8002bbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bbe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bc2:	643b      	str	r3, [r7, #64]	@ 0x40
 8002bc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bc6:	fa93 f3a3 	rbit	r3, r3
 8002bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bcc:	4b46      	ldr	r3, [pc, #280]	@ (8002ce8 <HAL_RCC_ClockConfig+0x260>)
 8002bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bd4:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002bd6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002bd8:	fa92 f2a2 	rbit	r2, r2
 8002bdc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002bde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002be0:	fab2 f282 	clz	r2, r2
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	f042 0220 	orr.w	r2, r2, #32
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	f002 021f 	and.w	r2, r2, #31
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d13a      	bne.n	8002c72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e0b2      	b.n	8002d66 <HAL_RCC_ClockConfig+0x2de>
 8002c00:	2302      	movs	r3, #2
 8002c02:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c06:	fa93 f3a3 	rbit	r3, r3
 8002c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c0e:	fab3 f383 	clz	r3, r3
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	095b      	lsrs	r3, r3, #5
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	f043 0301 	orr.w	r3, r3, #1
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d102      	bne.n	8002c28 <HAL_RCC_ClockConfig+0x1a0>
 8002c22:	4b31      	ldr	r3, [pc, #196]	@ (8002ce8 <HAL_RCC_ClockConfig+0x260>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	e00d      	b.n	8002c44 <HAL_RCC_ClockConfig+0x1bc>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c2e:	fa93 f3a3 	rbit	r3, r3
 8002c32:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c34:	2302      	movs	r3, #2
 8002c36:	623b      	str	r3, [r7, #32]
 8002c38:	6a3b      	ldr	r3, [r7, #32]
 8002c3a:	fa93 f3a3 	rbit	r3, r3
 8002c3e:	61fb      	str	r3, [r7, #28]
 8002c40:	4b29      	ldr	r3, [pc, #164]	@ (8002ce8 <HAL_RCC_ClockConfig+0x260>)
 8002c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c44:	2202      	movs	r2, #2
 8002c46:	61ba      	str	r2, [r7, #24]
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	fa92 f2a2 	rbit	r2, r2
 8002c4e:	617a      	str	r2, [r7, #20]
  return result;
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	fab2 f282 	clz	r2, r2
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	f042 0220 	orr.w	r2, r2, #32
 8002c5c:	b2d2      	uxtb	r2, r2
 8002c5e:	f002 021f 	and.w	r2, r2, #31
 8002c62:	2101      	movs	r1, #1
 8002c64:	fa01 f202 	lsl.w	r2, r1, r2
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e079      	b.n	8002d66 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c72:	4b1d      	ldr	r3, [pc, #116]	@ (8002ce8 <HAL_RCC_ClockConfig+0x260>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f023 0203 	bic.w	r2, r3, #3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	491a      	ldr	r1, [pc, #104]	@ (8002ce8 <HAL_RCC_ClockConfig+0x260>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c84:	f7fe f9a4 	bl	8000fd0 <HAL_GetTick>
 8002c88:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8a:	e00a      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c8c:	f7fe f9a0 	bl	8000fd0 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e061      	b.n	8002d66 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca2:	4b11      	ldr	r3, [pc, #68]	@ (8002ce8 <HAL_RCC_ClockConfig+0x260>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f003 020c 	and.w	r2, r3, #12
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d1eb      	bne.n	8002c8c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce4 <HAL_RCC_ClockConfig+0x25c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d214      	bcs.n	8002cec <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc2:	4b08      	ldr	r3, [pc, #32]	@ (8002ce4 <HAL_RCC_ClockConfig+0x25c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f023 0207 	bic.w	r2, r3, #7
 8002cca:	4906      	ldr	r1, [pc, #24]	@ (8002ce4 <HAL_RCC_ClockConfig+0x25c>)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd2:	4b04      	ldr	r3, [pc, #16]	@ (8002ce4 <HAL_RCC_ClockConfig+0x25c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d005      	beq.n	8002cec <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e040      	b.n	8002d66 <HAL_RCC_ClockConfig+0x2de>
 8002ce4:	40022000 	.word	0x40022000
 8002ce8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d008      	beq.n	8002d0a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d70 <HAL_RCC_ClockConfig+0x2e8>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	491a      	ldr	r1, [pc, #104]	@ (8002d70 <HAL_RCC_ClockConfig+0x2e8>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d009      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d16:	4b16      	ldr	r3, [pc, #88]	@ (8002d70 <HAL_RCC_ClockConfig+0x2e8>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	4912      	ldr	r1, [pc, #72]	@ (8002d70 <HAL_RCC_ClockConfig+0x2e8>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d2a:	f000 f829 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 8002d2e:	4601      	mov	r1, r0
 8002d30:	4b0f      	ldr	r3, [pc, #60]	@ (8002d70 <HAL_RCC_ClockConfig+0x2e8>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d38:	22f0      	movs	r2, #240	@ 0xf0
 8002d3a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	fa92 f2a2 	rbit	r2, r2
 8002d42:	60fa      	str	r2, [r7, #12]
  return result;
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	fab2 f282 	clz	r2, r2
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	40d3      	lsrs	r3, r2
 8002d4e:	4a09      	ldr	r2, [pc, #36]	@ (8002d74 <HAL_RCC_ClockConfig+0x2ec>)
 8002d50:	5cd3      	ldrb	r3, [r2, r3]
 8002d52:	fa21 f303 	lsr.w	r3, r1, r3
 8002d56:	4a08      	ldr	r2, [pc, #32]	@ (8002d78 <HAL_RCC_ClockConfig+0x2f0>)
 8002d58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002d5a:	4b08      	ldr	r3, [pc, #32]	@ (8002d7c <HAL_RCC_ClockConfig+0x2f4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fe f8f2 	bl	8000f48 <HAL_InitTick>
  
  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3778      	adds	r7, #120	@ 0x78
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40021000 	.word	0x40021000
 8002d74:	08005de0 	.word	0x08005de0
 8002d78:	20000020 	.word	0x20000020
 8002d7c:	20000024 	.word	0x20000024

08002d80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b08b      	sub	sp, #44	@ 0x2c
 8002d84:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	61fb      	str	r3, [r7, #28]
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61bb      	str	r3, [r7, #24]
 8002d8e:	2300      	movs	r3, #0
 8002d90:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d92:	2300      	movs	r3, #0
 8002d94:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002d9a:	4b29      	ldr	r3, [pc, #164]	@ (8002e40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f003 030c 	and.w	r3, r3, #12
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d002      	beq.n	8002db0 <HAL_RCC_GetSysClockFreq+0x30>
 8002daa:	2b08      	cmp	r3, #8
 8002dac:	d003      	beq.n	8002db6 <HAL_RCC_GetSysClockFreq+0x36>
 8002dae:	e03c      	b.n	8002e2a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002db0:	4b24      	ldr	r3, [pc, #144]	@ (8002e44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002db2:	623b      	str	r3, [r7, #32]
      break;
 8002db4:	e03c      	b.n	8002e30 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002dbc:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8002dc0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	fa92 f2a2 	rbit	r2, r2
 8002dc8:	607a      	str	r2, [r7, #4]
  return result;
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	fab2 f282 	clz	r2, r2
 8002dd0:	b2d2      	uxtb	r2, r2
 8002dd2:	40d3      	lsrs	r3, r2
 8002dd4:	4a1c      	ldr	r2, [pc, #112]	@ (8002e48 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002dd6:	5cd3      	ldrb	r3, [r2, r3]
 8002dd8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002dda:	4b19      	ldr	r3, [pc, #100]	@ (8002e40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	220f      	movs	r2, #15
 8002de4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	fa92 f2a2 	rbit	r2, r2
 8002dec:	60fa      	str	r2, [r7, #12]
  return result;
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	fab2 f282 	clz	r2, r2
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	40d3      	lsrs	r3, r2
 8002df8:	4a14      	ldr	r2, [pc, #80]	@ (8002e4c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002dfa:	5cd3      	ldrb	r3, [r2, r3]
 8002dfc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d008      	beq.n	8002e1a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e08:	4a0e      	ldr	r2, [pc, #56]	@ (8002e44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	fb02 f303 	mul.w	r3, r2, r3
 8002e16:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e18:	e004      	b.n	8002e24 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	4a0c      	ldr	r2, [pc, #48]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e1e:	fb02 f303 	mul.w	r3, r2, r3
 8002e22:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e26:	623b      	str	r3, [r7, #32]
      break;
 8002e28:	e002      	b.n	8002e30 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e2a:	4b06      	ldr	r3, [pc, #24]	@ (8002e44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e2c:	623b      	str	r3, [r7, #32]
      break;
 8002e2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e30:	6a3b      	ldr	r3, [r7, #32]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	372c      	adds	r7, #44	@ 0x2c
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	40021000 	.word	0x40021000
 8002e44:	007a1200 	.word	0x007a1200
 8002e48:	08005df8 	.word	0x08005df8
 8002e4c:	08005e08 	.word	0x08005e08
 8002e50:	003d0900 	.word	0x003d0900

08002e54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e58:	4b03      	ldr	r3, [pc, #12]	@ (8002e68 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	20000020 	.word	0x20000020

08002e6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002e72:	f7ff ffef 	bl	8002e54 <HAL_RCC_GetHCLKFreq>
 8002e76:	4601      	mov	r1, r0
 8002e78:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e80:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002e84:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	fa92 f2a2 	rbit	r2, r2
 8002e8c:	603a      	str	r2, [r7, #0]
  return result;
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	fab2 f282 	clz	r2, r2
 8002e94:	b2d2      	uxtb	r2, r2
 8002e96:	40d3      	lsrs	r3, r2
 8002e98:	4a04      	ldr	r2, [pc, #16]	@ (8002eac <HAL_RCC_GetPCLK1Freq+0x40>)
 8002e9a:	5cd3      	ldrb	r3, [r2, r3]
 8002e9c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	08005df0 	.word	0x08005df0

08002eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002eb6:	f7ff ffcd 	bl	8002e54 <HAL_RCC_GetHCLKFreq>
 8002eba:	4601      	mov	r1, r0
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8002eec <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002ec4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002ec8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	fa92 f2a2 	rbit	r2, r2
 8002ed0:	603a      	str	r2, [r7, #0]
  return result;
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	fab2 f282 	clz	r2, r2
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	40d3      	lsrs	r3, r2
 8002edc:	4a04      	ldr	r2, [pc, #16]	@ (8002ef0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002ede:	5cd3      	ldrb	r3, [r2, r3]
 8002ee0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	08005df0 	.word	0x08005df0

08002ef4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b092      	sub	sp, #72	@ 0x48
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002f04:	2300      	movs	r3, #0
 8002f06:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 80d4 	beq.w	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f18:	4b4e      	ldr	r3, [pc, #312]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10e      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f24:	4b4b      	ldr	r3, [pc, #300]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	4a4a      	ldr	r2, [pc, #296]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f2e:	61d3      	str	r3, [r2, #28]
 8002f30:	4b48      	ldr	r3, [pc, #288]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f38:	60bb      	str	r3, [r7, #8]
 8002f3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f42:	4b45      	ldr	r3, [pc, #276]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d118      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f4e:	4b42      	ldr	r3, [pc, #264]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a41      	ldr	r2, [pc, #260]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f58:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f5a:	f7fe f839 	bl	8000fd0 <HAL_GetTick>
 8002f5e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f60:	e008      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f62:	f7fe f835 	bl	8000fd0 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b64      	cmp	r3, #100	@ 0x64
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e169      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f74:	4b38      	ldr	r3, [pc, #224]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0f0      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f80:	4b34      	ldr	r3, [pc, #208]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 8084 	beq.w	800309a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f9a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d07c      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fa0:	4b2c      	ldr	r3, [pc, #176]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002faa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002fae:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb2:	fa93 f3a3 	rbit	r3, r3
 8002fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fba:	fab3 f383 	clz	r3, r3
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4b26      	ldr	r3, [pc, #152]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fc4:	4413      	add	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	461a      	mov	r2, r3
 8002fca:	2301      	movs	r3, #1
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002fd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fd6:	fa93 f3a3 	rbit	r3, r3
 8002fda:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fde:	fab3 f383 	clz	r3, r3
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	4b1d      	ldr	r3, [pc, #116]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fe8:	4413      	add	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	461a      	mov	r2, r3
 8002fee:	2300      	movs	r3, #0
 8002ff0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ff2:	4a18      	ldr	r2, [pc, #96]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ff6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ff8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d04b      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003002:	f7fd ffe5 	bl	8000fd0 <HAL_GetTick>
 8003006:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003008:	e00a      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800300a:	f7fd ffe1 	bl	8000fd0 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003018:	4293      	cmp	r3, r2
 800301a:	d901      	bls.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e113      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003020:	2302      	movs	r3, #2
 8003022:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003026:	fa93 f3a3 	rbit	r3, r3
 800302a:	627b      	str	r3, [r7, #36]	@ 0x24
 800302c:	2302      	movs	r3, #2
 800302e:	623b      	str	r3, [r7, #32]
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	fa93 f3a3 	rbit	r3, r3
 8003036:	61fb      	str	r3, [r7, #28]
  return result;
 8003038:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800303a:	fab3 f383 	clz	r3, r3
 800303e:	b2db      	uxtb	r3, r3
 8003040:	095b      	lsrs	r3, r3, #5
 8003042:	b2db      	uxtb	r3, r3
 8003044:	f043 0302 	orr.w	r3, r3, #2
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d108      	bne.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800304e:	4b01      	ldr	r3, [pc, #4]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	e00d      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003054:	40021000 	.word	0x40021000
 8003058:	40007000 	.word	0x40007000
 800305c:	10908100 	.word	0x10908100
 8003060:	2302      	movs	r3, #2
 8003062:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	fa93 f3a3 	rbit	r3, r3
 800306a:	617b      	str	r3, [r7, #20]
 800306c:	4b78      	ldr	r3, [pc, #480]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800306e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003070:	2202      	movs	r2, #2
 8003072:	613a      	str	r2, [r7, #16]
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	fa92 f2a2 	rbit	r2, r2
 800307a:	60fa      	str	r2, [r7, #12]
  return result;
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	fab2 f282 	clz	r2, r2
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	f002 021f 	and.w	r2, r2, #31
 800308e:	2101      	movs	r1, #1
 8003090:	fa01 f202 	lsl.w	r2, r1, r2
 8003094:	4013      	ands	r3, r2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0b7      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800309a:	4b6d      	ldr	r3, [pc, #436]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	496a      	ldr	r1, [pc, #424]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030ac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d105      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b4:	4b66      	ldr	r3, [pc, #408]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030b6:	69db      	ldr	r3, [r3, #28]
 80030b8:	4a65      	ldr	r2, [pc, #404]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030be:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030cc:	4b60      	ldr	r3, [pc, #384]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d0:	f023 0203 	bic.w	r2, r3, #3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	495d      	ldr	r1, [pc, #372]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d008      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030ea:	4b59      	ldr	r3, [pc, #356]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ee:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	4956      	ldr	r1, [pc, #344]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	d008      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003108:	4b51      	ldr	r3, [pc, #324]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800310a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	494e      	ldr	r1, [pc, #312]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003116:	4313      	orrs	r3, r2
 8003118:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0320 	and.w	r3, r3, #32
 8003122:	2b00      	cmp	r3, #0
 8003124:	d008      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003126:	4b4a      	ldr	r3, [pc, #296]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312a:	f023 0210 	bic.w	r2, r3, #16
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	4947      	ldr	r1, [pc, #284]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003134:	4313      	orrs	r3, r2
 8003136:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d008      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003144:	4b42      	ldr	r3, [pc, #264]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003150:	493f      	ldr	r1, [pc, #252]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003152:	4313      	orrs	r3, r2
 8003154:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800315e:	2b00      	cmp	r3, #0
 8003160:	d008      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003162:	4b3b      	ldr	r3, [pc, #236]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003166:	f023 0220 	bic.w	r2, r3, #32
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	4938      	ldr	r1, [pc, #224]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003170:	4313      	orrs	r3, r2
 8003172:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0308 	and.w	r3, r3, #8
 800317c:	2b00      	cmp	r3, #0
 800317e:	d008      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003180:	4b33      	ldr	r3, [pc, #204]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003184:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	4930      	ldr	r1, [pc, #192]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800318e:	4313      	orrs	r3, r2
 8003190:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0310 	and.w	r3, r3, #16
 800319a:	2b00      	cmp	r3, #0
 800319c:	d008      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800319e:	4b2c      	ldr	r3, [pc, #176]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	4929      	ldr	r1, [pc, #164]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d008      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80031bc:	4b24      	ldr	r3, [pc, #144]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c8:	4921      	ldr	r1, [pc, #132]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d008      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80031da:	4b1d      	ldr	r3, [pc, #116]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031de:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e6:	491a      	ldr	r1, [pc, #104]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d008      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80031f8:	4b15      	ldr	r3, [pc, #84]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031fc:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003204:	4912      	ldr	r1, [pc, #72]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003206:	4313      	orrs	r3, r2
 8003208:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d008      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003216:	4b0e      	ldr	r3, [pc, #56]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003222:	490b      	ldr	r1, [pc, #44]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003224:	4313      	orrs	r3, r2
 8003226:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d008      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003234:	4b06      	ldr	r3, [pc, #24]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003238:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003240:	4903      	ldr	r1, [pc, #12]	@ (8003250 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003242:	4313      	orrs	r3, r2
 8003244:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3748      	adds	r7, #72	@ 0x48
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40021000 	.word	0x40021000

08003254 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e09d      	b.n	80033a2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326a:	2b00      	cmp	r3, #0
 800326c:	d108      	bne.n	8003280 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003276:	d009      	beq.n	800328c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	61da      	str	r2, [r3, #28]
 800327e:	e005      	b.n	800328c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d106      	bne.n	80032ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7fd fc8e 	bl	8000bc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80032cc:	d902      	bls.n	80032d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80032ce:	2300      	movs	r3, #0
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	e002      	b.n	80032da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80032d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80032e2:	d007      	beq.n	80032f4 <HAL_SPI_Init+0xa0>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80032ec:	d002      	beq.n	80032f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003304:	431a      	orrs	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	431a      	orrs	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800332c:	431a      	orrs	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003336:	ea42 0103 	orr.w	r1, r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800333e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	0c1b      	lsrs	r3, r3, #16
 8003350:	f003 0204 	and.w	r2, r3, #4
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003358:	f003 0310 	and.w	r3, r3, #16
 800335c:	431a      	orrs	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003370:	ea42 0103 	orr.w	r1, r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	69da      	ldr	r2, [r3, #28]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003390:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b082      	sub	sp, #8
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e049      	b.n	8003450 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d106      	bne.n	80033d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7fd fc3b 	bl	8000c4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2202      	movs	r2, #2
 80033da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	3304      	adds	r3, #4
 80033e6:	4619      	mov	r1, r3
 80033e8:	4610      	mov	r0, r2
 80033ea:	f000 fd27 	bl	8003e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b01      	cmp	r3, #1
 800346a:	d001      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e04a      	b.n	8003506 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0201 	orr.w	r2, r2, #1
 8003486:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a21      	ldr	r2, [pc, #132]	@ (8003514 <HAL_TIM_Base_Start_IT+0xbc>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d018      	beq.n	80034c4 <HAL_TIM_Base_Start_IT+0x6c>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800349a:	d013      	beq.n	80034c4 <HAL_TIM_Base_Start_IT+0x6c>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a1d      	ldr	r2, [pc, #116]	@ (8003518 <HAL_TIM_Base_Start_IT+0xc0>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d00e      	beq.n	80034c4 <HAL_TIM_Base_Start_IT+0x6c>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a1c      	ldr	r2, [pc, #112]	@ (800351c <HAL_TIM_Base_Start_IT+0xc4>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d009      	beq.n	80034c4 <HAL_TIM_Base_Start_IT+0x6c>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a1a      	ldr	r2, [pc, #104]	@ (8003520 <HAL_TIM_Base_Start_IT+0xc8>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d004      	beq.n	80034c4 <HAL_TIM_Base_Start_IT+0x6c>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a19      	ldr	r2, [pc, #100]	@ (8003524 <HAL_TIM_Base_Start_IT+0xcc>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d115      	bne.n	80034f0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689a      	ldr	r2, [r3, #8]
 80034ca:	4b17      	ldr	r3, [pc, #92]	@ (8003528 <HAL_TIM_Base_Start_IT+0xd0>)
 80034cc:	4013      	ands	r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2b06      	cmp	r3, #6
 80034d4:	d015      	beq.n	8003502 <HAL_TIM_Base_Start_IT+0xaa>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034dc:	d011      	beq.n	8003502 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f042 0201 	orr.w	r2, r2, #1
 80034ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ee:	e008      	b.n	8003502 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0201 	orr.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	e000      	b.n	8003504 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003502:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	40012c00 	.word	0x40012c00
 8003518:	40000400 	.word	0x40000400
 800351c:	40000800 	.word	0x40000800
 8003520:	40013400 	.word	0x40013400
 8003524:	40014000 	.word	0x40014000
 8003528:	00010007 	.word	0x00010007

0800352c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e049      	b.n	80035d2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d106      	bne.n	8003558 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f841 	bl	80035da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3304      	adds	r3, #4
 8003568:	4619      	mov	r1, r3
 800356a:	4610      	mov	r0, r2
 800356c:	f000 fc66 	bl	8003e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
	...

080035f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d109      	bne.n	8003614 <HAL_TIM_PWM_Start+0x24>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b01      	cmp	r3, #1
 800360a:	bf14      	ite	ne
 800360c:	2301      	movne	r3, #1
 800360e:	2300      	moveq	r3, #0
 8003610:	b2db      	uxtb	r3, r3
 8003612:	e03c      	b.n	800368e <HAL_TIM_PWM_Start+0x9e>
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	2b04      	cmp	r3, #4
 8003618:	d109      	bne.n	800362e <HAL_TIM_PWM_Start+0x3e>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b01      	cmp	r3, #1
 8003624:	bf14      	ite	ne
 8003626:	2301      	movne	r3, #1
 8003628:	2300      	moveq	r3, #0
 800362a:	b2db      	uxtb	r3, r3
 800362c:	e02f      	b.n	800368e <HAL_TIM_PWM_Start+0x9e>
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	2b08      	cmp	r3, #8
 8003632:	d109      	bne.n	8003648 <HAL_TIM_PWM_Start+0x58>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b01      	cmp	r3, #1
 800363e:	bf14      	ite	ne
 8003640:	2301      	movne	r3, #1
 8003642:	2300      	moveq	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	e022      	b.n	800368e <HAL_TIM_PWM_Start+0x9e>
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	2b0c      	cmp	r3, #12
 800364c:	d109      	bne.n	8003662 <HAL_TIM_PWM_Start+0x72>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b01      	cmp	r3, #1
 8003658:	bf14      	ite	ne
 800365a:	2301      	movne	r3, #1
 800365c:	2300      	moveq	r3, #0
 800365e:	b2db      	uxtb	r3, r3
 8003660:	e015      	b.n	800368e <HAL_TIM_PWM_Start+0x9e>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2b10      	cmp	r3, #16
 8003666:	d109      	bne.n	800367c <HAL_TIM_PWM_Start+0x8c>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b01      	cmp	r3, #1
 8003672:	bf14      	ite	ne
 8003674:	2301      	movne	r3, #1
 8003676:	2300      	moveq	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	e008      	b.n	800368e <HAL_TIM_PWM_Start+0x9e>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b01      	cmp	r3, #1
 8003686:	bf14      	ite	ne
 8003688:	2301      	movne	r3, #1
 800368a:	2300      	moveq	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e097      	b.n	80037c6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d104      	bne.n	80036a6 <HAL_TIM_PWM_Start+0xb6>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036a4:	e023      	b.n	80036ee <HAL_TIM_PWM_Start+0xfe>
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d104      	bne.n	80036b6 <HAL_TIM_PWM_Start+0xc6>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036b4:	e01b      	b.n	80036ee <HAL_TIM_PWM_Start+0xfe>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d104      	bne.n	80036c6 <HAL_TIM_PWM_Start+0xd6>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2202      	movs	r2, #2
 80036c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036c4:	e013      	b.n	80036ee <HAL_TIM_PWM_Start+0xfe>
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	2b0c      	cmp	r3, #12
 80036ca:	d104      	bne.n	80036d6 <HAL_TIM_PWM_Start+0xe6>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2202      	movs	r2, #2
 80036d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80036d4:	e00b      	b.n	80036ee <HAL_TIM_PWM_Start+0xfe>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2b10      	cmp	r3, #16
 80036da:	d104      	bne.n	80036e6 <HAL_TIM_PWM_Start+0xf6>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2202      	movs	r2, #2
 80036e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036e4:	e003      	b.n	80036ee <HAL_TIM_PWM_Start+0xfe>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2202      	movs	r2, #2
 80036ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2201      	movs	r2, #1
 80036f4:	6839      	ldr	r1, [r7, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 ffa0 	bl	800463c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a33      	ldr	r2, [pc, #204]	@ (80037d0 <HAL_TIM_PWM_Start+0x1e0>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d013      	beq.n	800372e <HAL_TIM_PWM_Start+0x13e>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a32      	ldr	r2, [pc, #200]	@ (80037d4 <HAL_TIM_PWM_Start+0x1e4>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d00e      	beq.n	800372e <HAL_TIM_PWM_Start+0x13e>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a30      	ldr	r2, [pc, #192]	@ (80037d8 <HAL_TIM_PWM_Start+0x1e8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d009      	beq.n	800372e <HAL_TIM_PWM_Start+0x13e>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a2f      	ldr	r2, [pc, #188]	@ (80037dc <HAL_TIM_PWM_Start+0x1ec>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d004      	beq.n	800372e <HAL_TIM_PWM_Start+0x13e>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a2d      	ldr	r2, [pc, #180]	@ (80037e0 <HAL_TIM_PWM_Start+0x1f0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d101      	bne.n	8003732 <HAL_TIM_PWM_Start+0x142>
 800372e:	2301      	movs	r3, #1
 8003730:	e000      	b.n	8003734 <HAL_TIM_PWM_Start+0x144>
 8003732:	2300      	movs	r3, #0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d007      	beq.n	8003748 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003746:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a20      	ldr	r2, [pc, #128]	@ (80037d0 <HAL_TIM_PWM_Start+0x1e0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d018      	beq.n	8003784 <HAL_TIM_PWM_Start+0x194>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800375a:	d013      	beq.n	8003784 <HAL_TIM_PWM_Start+0x194>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a20      	ldr	r2, [pc, #128]	@ (80037e4 <HAL_TIM_PWM_Start+0x1f4>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d00e      	beq.n	8003784 <HAL_TIM_PWM_Start+0x194>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a1f      	ldr	r2, [pc, #124]	@ (80037e8 <HAL_TIM_PWM_Start+0x1f8>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d009      	beq.n	8003784 <HAL_TIM_PWM_Start+0x194>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a17      	ldr	r2, [pc, #92]	@ (80037d4 <HAL_TIM_PWM_Start+0x1e4>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d004      	beq.n	8003784 <HAL_TIM_PWM_Start+0x194>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a16      	ldr	r2, [pc, #88]	@ (80037d8 <HAL_TIM_PWM_Start+0x1e8>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d115      	bne.n	80037b0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689a      	ldr	r2, [r3, #8]
 800378a:	4b18      	ldr	r3, [pc, #96]	@ (80037ec <HAL_TIM_PWM_Start+0x1fc>)
 800378c:	4013      	ands	r3, r2
 800378e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2b06      	cmp	r3, #6
 8003794:	d015      	beq.n	80037c2 <HAL_TIM_PWM_Start+0x1d2>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800379c:	d011      	beq.n	80037c2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f042 0201 	orr.w	r2, r2, #1
 80037ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ae:	e008      	b.n	80037c2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 0201 	orr.w	r2, r2, #1
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	e000      	b.n	80037c4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40012c00 	.word	0x40012c00
 80037d4:	40013400 	.word	0x40013400
 80037d8:	40014000 	.word	0x40014000
 80037dc:	40014400 	.word	0x40014400
 80037e0:	40014800 	.word	0x40014800
 80037e4:	40000400 	.word	0x40000400
 80037e8:	40000800 	.word	0x40000800
 80037ec:	00010007 	.word	0x00010007

080037f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b02      	cmp	r3, #2
 8003804:	d122      	bne.n	800384c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b02      	cmp	r3, #2
 8003812:	d11b      	bne.n	800384c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f06f 0202 	mvn.w	r2, #2
 800381c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	f003 0303 	and.w	r3, r3, #3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 fae3 	bl	8003dfe <HAL_TIM_IC_CaptureCallback>
 8003838:	e005      	b.n	8003846 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 fad5 	bl	8003dea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 fae6 	bl	8003e12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	f003 0304 	and.w	r3, r3, #4
 8003856:	2b04      	cmp	r3, #4
 8003858:	d122      	bne.n	80038a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b04      	cmp	r3, #4
 8003866:	d11b      	bne.n	80038a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f06f 0204 	mvn.w	r2, #4
 8003870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2202      	movs	r2, #2
 8003876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 fab9 	bl	8003dfe <HAL_TIM_IC_CaptureCallback>
 800388c:	e005      	b.n	800389a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 faab 	bl	8003dea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 fabc 	bl	8003e12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d122      	bne.n	80038f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	f003 0308 	and.w	r3, r3, #8
 80038b8:	2b08      	cmp	r3, #8
 80038ba:	d11b      	bne.n	80038f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f06f 0208 	mvn.w	r2, #8
 80038c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2204      	movs	r2, #4
 80038ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 fa8f 	bl	8003dfe <HAL_TIM_IC_CaptureCallback>
 80038e0:	e005      	b.n	80038ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 fa81 	bl	8003dea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 fa92 	bl	8003e12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	f003 0310 	and.w	r3, r3, #16
 80038fe:	2b10      	cmp	r3, #16
 8003900:	d122      	bne.n	8003948 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f003 0310 	and.w	r3, r3, #16
 800390c:	2b10      	cmp	r3, #16
 800390e:	d11b      	bne.n	8003948 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f06f 0210 	mvn.w	r2, #16
 8003918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2208      	movs	r2, #8
 800391e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 fa65 	bl	8003dfe <HAL_TIM_IC_CaptureCallback>
 8003934:	e005      	b.n	8003942 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 fa57 	bl	8003dea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 fa68 	bl	8003e12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b01      	cmp	r3, #1
 8003954:	d10e      	bne.n	8003974 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b01      	cmp	r3, #1
 8003962:	d107      	bne.n	8003974 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f06f 0201 	mvn.w	r2, #1
 800396c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7fc fe04 	bl	800057c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800397e:	2b80      	cmp	r3, #128	@ 0x80
 8003980:	d10e      	bne.n	80039a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800398c:	2b80      	cmp	r3, #128	@ 0x80
 800398e:	d107      	bne.n	80039a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 fefe 	bl	800479c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039ae:	d10e      	bne.n	80039ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ba:	2b80      	cmp	r3, #128	@ 0x80
 80039bc:	d107      	bne.n	80039ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80039c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 fef1 	bl	80047b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039d8:	2b40      	cmp	r3, #64	@ 0x40
 80039da:	d10e      	bne.n	80039fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039e6:	2b40      	cmp	r3, #64	@ 0x40
 80039e8:	d107      	bne.n	80039fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80039f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 fa16 	bl	8003e26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	f003 0320 	and.w	r3, r3, #32
 8003a04:	2b20      	cmp	r3, #32
 8003a06:	d10e      	bne.n	8003a26 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	f003 0320 	and.w	r3, r3, #32
 8003a12:	2b20      	cmp	r3, #32
 8003a14:	d107      	bne.n	8003a26 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f06f 0220 	mvn.w	r2, #32
 8003a1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 feb1 	bl	8004788 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a26:	bf00      	nop
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
	...

08003a30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d101      	bne.n	8003a4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	e0ff      	b.n	8003c4e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b14      	cmp	r3, #20
 8003a5a:	f200 80f0 	bhi.w	8003c3e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a64:	08003ab9 	.word	0x08003ab9
 8003a68:	08003c3f 	.word	0x08003c3f
 8003a6c:	08003c3f 	.word	0x08003c3f
 8003a70:	08003c3f 	.word	0x08003c3f
 8003a74:	08003af9 	.word	0x08003af9
 8003a78:	08003c3f 	.word	0x08003c3f
 8003a7c:	08003c3f 	.word	0x08003c3f
 8003a80:	08003c3f 	.word	0x08003c3f
 8003a84:	08003b3b 	.word	0x08003b3b
 8003a88:	08003c3f 	.word	0x08003c3f
 8003a8c:	08003c3f 	.word	0x08003c3f
 8003a90:	08003c3f 	.word	0x08003c3f
 8003a94:	08003b7b 	.word	0x08003b7b
 8003a98:	08003c3f 	.word	0x08003c3f
 8003a9c:	08003c3f 	.word	0x08003c3f
 8003aa0:	08003c3f 	.word	0x08003c3f
 8003aa4:	08003bbd 	.word	0x08003bbd
 8003aa8:	08003c3f 	.word	0x08003c3f
 8003aac:	08003c3f 	.word	0x08003c3f
 8003ab0:	08003c3f 	.word	0x08003c3f
 8003ab4:	08003bfd 	.word	0x08003bfd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68b9      	ldr	r1, [r7, #8]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 fa4c 	bl	8003f5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699a      	ldr	r2, [r3, #24]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0208 	orr.w	r2, r2, #8
 8003ad2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	699a      	ldr	r2, [r3, #24]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0204 	bic.w	r2, r2, #4
 8003ae2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6999      	ldr	r1, [r3, #24]
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	691a      	ldr	r2, [r3, #16]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	619a      	str	r2, [r3, #24]
      break;
 8003af6:	e0a5      	b.n	8003c44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68b9      	ldr	r1, [r7, #8]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 fabc 	bl	800407c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699a      	ldr	r2, [r3, #24]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699a      	ldr	r2, [r3, #24]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6999      	ldr	r1, [r3, #24]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	021a      	lsls	r2, r3, #8
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	619a      	str	r2, [r3, #24]
      break;
 8003b38:	e084      	b.n	8003c44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68b9      	ldr	r1, [r7, #8]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f000 fb25 	bl	8004190 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	69da      	ldr	r2, [r3, #28]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f042 0208 	orr.w	r2, r2, #8
 8003b54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	69da      	ldr	r2, [r3, #28]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0204 	bic.w	r2, r2, #4
 8003b64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	69d9      	ldr	r1, [r3, #28]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	691a      	ldr	r2, [r3, #16]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	61da      	str	r2, [r3, #28]
      break;
 8003b78:	e064      	b.n	8003c44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68b9      	ldr	r1, [r7, #8]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 fb8d 	bl	80042a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	69da      	ldr	r2, [r3, #28]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	69da      	ldr	r2, [r3, #28]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ba4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	69d9      	ldr	r1, [r3, #28]
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	021a      	lsls	r2, r3, #8
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	61da      	str	r2, [r3, #28]
      break;
 8003bba:	e043      	b.n	8003c44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68b9      	ldr	r1, [r7, #8]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 fbd6 	bl	8004374 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0208 	orr.w	r2, r2, #8
 8003bd6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0204 	bic.w	r2, r2, #4
 8003be6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	691a      	ldr	r2, [r3, #16]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003bfa:	e023      	b.n	8003c44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68b9      	ldr	r1, [r7, #8]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 fc1a 	bl	800443c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c16:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c26:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	021a      	lsls	r2, r3, #8
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003c3c:	e002      	b.n	8003c44 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	75fb      	strb	r3, [r7, #23]
      break;
 8003c42:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop

08003c58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c62:	2300      	movs	r3, #0
 8003c64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d101      	bne.n	8003c74 <HAL_TIM_ConfigClockSource+0x1c>
 8003c70:	2302      	movs	r3, #2
 8003c72:	e0b6      	b.n	8003de2 <HAL_TIM_ConfigClockSource+0x18a>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c92:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003c96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cb0:	d03e      	beq.n	8003d30 <HAL_TIM_ConfigClockSource+0xd8>
 8003cb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cb6:	f200 8087 	bhi.w	8003dc8 <HAL_TIM_ConfigClockSource+0x170>
 8003cba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cbe:	f000 8086 	beq.w	8003dce <HAL_TIM_ConfigClockSource+0x176>
 8003cc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cc6:	d87f      	bhi.n	8003dc8 <HAL_TIM_ConfigClockSource+0x170>
 8003cc8:	2b70      	cmp	r3, #112	@ 0x70
 8003cca:	d01a      	beq.n	8003d02 <HAL_TIM_ConfigClockSource+0xaa>
 8003ccc:	2b70      	cmp	r3, #112	@ 0x70
 8003cce:	d87b      	bhi.n	8003dc8 <HAL_TIM_ConfigClockSource+0x170>
 8003cd0:	2b60      	cmp	r3, #96	@ 0x60
 8003cd2:	d050      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0x11e>
 8003cd4:	2b60      	cmp	r3, #96	@ 0x60
 8003cd6:	d877      	bhi.n	8003dc8 <HAL_TIM_ConfigClockSource+0x170>
 8003cd8:	2b50      	cmp	r3, #80	@ 0x50
 8003cda:	d03c      	beq.n	8003d56 <HAL_TIM_ConfigClockSource+0xfe>
 8003cdc:	2b50      	cmp	r3, #80	@ 0x50
 8003cde:	d873      	bhi.n	8003dc8 <HAL_TIM_ConfigClockSource+0x170>
 8003ce0:	2b40      	cmp	r3, #64	@ 0x40
 8003ce2:	d058      	beq.n	8003d96 <HAL_TIM_ConfigClockSource+0x13e>
 8003ce4:	2b40      	cmp	r3, #64	@ 0x40
 8003ce6:	d86f      	bhi.n	8003dc8 <HAL_TIM_ConfigClockSource+0x170>
 8003ce8:	2b30      	cmp	r3, #48	@ 0x30
 8003cea:	d064      	beq.n	8003db6 <HAL_TIM_ConfigClockSource+0x15e>
 8003cec:	2b30      	cmp	r3, #48	@ 0x30
 8003cee:	d86b      	bhi.n	8003dc8 <HAL_TIM_ConfigClockSource+0x170>
 8003cf0:	2b20      	cmp	r3, #32
 8003cf2:	d060      	beq.n	8003db6 <HAL_TIM_ConfigClockSource+0x15e>
 8003cf4:	2b20      	cmp	r3, #32
 8003cf6:	d867      	bhi.n	8003dc8 <HAL_TIM_ConfigClockSource+0x170>
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d05c      	beq.n	8003db6 <HAL_TIM_ConfigClockSource+0x15e>
 8003cfc:	2b10      	cmp	r3, #16
 8003cfe:	d05a      	beq.n	8003db6 <HAL_TIM_ConfigClockSource+0x15e>
 8003d00:	e062      	b.n	8003dc8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d12:	f000 fc73 	bl	80045fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	609a      	str	r2, [r3, #8]
      break;
 8003d2e:	e04f      	b.n	8003dd0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d40:	f000 fc5c 	bl	80045fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689a      	ldr	r2, [r3, #8]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d52:	609a      	str	r2, [r3, #8]
      break;
 8003d54:	e03c      	b.n	8003dd0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d62:	461a      	mov	r2, r3
 8003d64:	f000 fbd0 	bl	8004508 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2150      	movs	r1, #80	@ 0x50
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fc29 	bl	80045c6 <TIM_ITRx_SetConfig>
      break;
 8003d74:	e02c      	b.n	8003dd0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d82:	461a      	mov	r2, r3
 8003d84:	f000 fbef 	bl	8004566 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2160      	movs	r1, #96	@ 0x60
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fc19 	bl	80045c6 <TIM_ITRx_SetConfig>
      break;
 8003d94:	e01c      	b.n	8003dd0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003da2:	461a      	mov	r2, r3
 8003da4:	f000 fbb0 	bl	8004508 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2140      	movs	r1, #64	@ 0x40
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 fc09 	bl	80045c6 <TIM_ITRx_SetConfig>
      break;
 8003db4:	e00c      	b.n	8003dd0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	4610      	mov	r0, r2
 8003dc2:	f000 fc00 	bl	80045c6 <TIM_ITRx_SetConfig>
      break;
 8003dc6:	e003      	b.n	8003dd0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	73fb      	strb	r3, [r7, #15]
      break;
 8003dcc:	e000      	b.n	8003dd0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003dce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e2e:	bf00      	nop
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
	...

08003e3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a3c      	ldr	r2, [pc, #240]	@ (8003f40 <TIM_Base_SetConfig+0x104>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d00f      	beq.n	8003e74 <TIM_Base_SetConfig+0x38>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e5a:	d00b      	beq.n	8003e74 <TIM_Base_SetConfig+0x38>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a39      	ldr	r2, [pc, #228]	@ (8003f44 <TIM_Base_SetConfig+0x108>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d007      	beq.n	8003e74 <TIM_Base_SetConfig+0x38>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a38      	ldr	r2, [pc, #224]	@ (8003f48 <TIM_Base_SetConfig+0x10c>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d003      	beq.n	8003e74 <TIM_Base_SetConfig+0x38>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a37      	ldr	r2, [pc, #220]	@ (8003f4c <TIM_Base_SetConfig+0x110>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d108      	bne.n	8003e86 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a2d      	ldr	r2, [pc, #180]	@ (8003f40 <TIM_Base_SetConfig+0x104>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d01b      	beq.n	8003ec6 <TIM_Base_SetConfig+0x8a>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e94:	d017      	beq.n	8003ec6 <TIM_Base_SetConfig+0x8a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a2a      	ldr	r2, [pc, #168]	@ (8003f44 <TIM_Base_SetConfig+0x108>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d013      	beq.n	8003ec6 <TIM_Base_SetConfig+0x8a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a29      	ldr	r2, [pc, #164]	@ (8003f48 <TIM_Base_SetConfig+0x10c>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d00f      	beq.n	8003ec6 <TIM_Base_SetConfig+0x8a>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a28      	ldr	r2, [pc, #160]	@ (8003f4c <TIM_Base_SetConfig+0x110>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d00b      	beq.n	8003ec6 <TIM_Base_SetConfig+0x8a>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a27      	ldr	r2, [pc, #156]	@ (8003f50 <TIM_Base_SetConfig+0x114>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d007      	beq.n	8003ec6 <TIM_Base_SetConfig+0x8a>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a26      	ldr	r2, [pc, #152]	@ (8003f54 <TIM_Base_SetConfig+0x118>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d003      	beq.n	8003ec6 <TIM_Base_SetConfig+0x8a>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a25      	ldr	r2, [pc, #148]	@ (8003f58 <TIM_Base_SetConfig+0x11c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d108      	bne.n	8003ed8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ecc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a10      	ldr	r2, [pc, #64]	@ (8003f40 <TIM_Base_SetConfig+0x104>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d00f      	beq.n	8003f24 <TIM_Base_SetConfig+0xe8>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a11      	ldr	r2, [pc, #68]	@ (8003f4c <TIM_Base_SetConfig+0x110>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d00b      	beq.n	8003f24 <TIM_Base_SetConfig+0xe8>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a10      	ldr	r2, [pc, #64]	@ (8003f50 <TIM_Base_SetConfig+0x114>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d007      	beq.n	8003f24 <TIM_Base_SetConfig+0xe8>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a0f      	ldr	r2, [pc, #60]	@ (8003f54 <TIM_Base_SetConfig+0x118>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d003      	beq.n	8003f24 <TIM_Base_SetConfig+0xe8>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a0e      	ldr	r2, [pc, #56]	@ (8003f58 <TIM_Base_SetConfig+0x11c>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d103      	bne.n	8003f2c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	691a      	ldr	r2, [r3, #16]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	615a      	str	r2, [r3, #20]
}
 8003f32:	bf00      	nop
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	40012c00 	.word	0x40012c00
 8003f44:	40000400 	.word	0x40000400
 8003f48:	40000800 	.word	0x40000800
 8003f4c:	40013400 	.word	0x40013400
 8003f50:	40014000 	.word	0x40014000
 8003f54:	40014400 	.word	0x40014400
 8003f58:	40014800 	.word	0x40014800

08003f5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b087      	sub	sp, #28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	f023 0201 	bic.w	r2, r3, #1
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f023 0303 	bic.w	r3, r3, #3
 8003f96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f023 0302 	bic.w	r3, r3, #2
 8003fa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a2c      	ldr	r2, [pc, #176]	@ (8004068 <TIM_OC1_SetConfig+0x10c>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d00f      	beq.n	8003fdc <TIM_OC1_SetConfig+0x80>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a2b      	ldr	r2, [pc, #172]	@ (800406c <TIM_OC1_SetConfig+0x110>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d00b      	beq.n	8003fdc <TIM_OC1_SetConfig+0x80>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a2a      	ldr	r2, [pc, #168]	@ (8004070 <TIM_OC1_SetConfig+0x114>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d007      	beq.n	8003fdc <TIM_OC1_SetConfig+0x80>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a29      	ldr	r2, [pc, #164]	@ (8004074 <TIM_OC1_SetConfig+0x118>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d003      	beq.n	8003fdc <TIM_OC1_SetConfig+0x80>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a28      	ldr	r2, [pc, #160]	@ (8004078 <TIM_OC1_SetConfig+0x11c>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d10c      	bne.n	8003ff6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f023 0308 	bic.w	r3, r3, #8
 8003fe2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f023 0304 	bic.w	r3, r3, #4
 8003ff4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a1b      	ldr	r2, [pc, #108]	@ (8004068 <TIM_OC1_SetConfig+0x10c>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d00f      	beq.n	800401e <TIM_OC1_SetConfig+0xc2>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a1a      	ldr	r2, [pc, #104]	@ (800406c <TIM_OC1_SetConfig+0x110>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d00b      	beq.n	800401e <TIM_OC1_SetConfig+0xc2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a19      	ldr	r2, [pc, #100]	@ (8004070 <TIM_OC1_SetConfig+0x114>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d007      	beq.n	800401e <TIM_OC1_SetConfig+0xc2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a18      	ldr	r2, [pc, #96]	@ (8004074 <TIM_OC1_SetConfig+0x118>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d003      	beq.n	800401e <TIM_OC1_SetConfig+0xc2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a17      	ldr	r2, [pc, #92]	@ (8004078 <TIM_OC1_SetConfig+0x11c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d111      	bne.n	8004042 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004024:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800402c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	4313      	orrs	r3, r2
 8004036:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	4313      	orrs	r3, r2
 8004040:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	621a      	str	r2, [r3, #32]
}
 800405c:	bf00      	nop
 800405e:	371c      	adds	r7, #28
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	40012c00 	.word	0x40012c00
 800406c:	40013400 	.word	0x40013400
 8004070:	40014000 	.word	0x40014000
 8004074:	40014400 	.word	0x40014400
 8004078:	40014800 	.word	0x40014800

0800407c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800407c:	b480      	push	{r7}
 800407e:	b087      	sub	sp, #28
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	f023 0210 	bic.w	r2, r3, #16
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	021b      	lsls	r3, r3, #8
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f023 0320 	bic.w	r3, r3, #32
 80040ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	011b      	lsls	r3, r3, #4
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a28      	ldr	r2, [pc, #160]	@ (800417c <TIM_OC2_SetConfig+0x100>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d003      	beq.n	80040e8 <TIM_OC2_SetConfig+0x6c>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a27      	ldr	r2, [pc, #156]	@ (8004180 <TIM_OC2_SetConfig+0x104>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d10d      	bne.n	8004104 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004102:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a1d      	ldr	r2, [pc, #116]	@ (800417c <TIM_OC2_SetConfig+0x100>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d00f      	beq.n	800412c <TIM_OC2_SetConfig+0xb0>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a1c      	ldr	r2, [pc, #112]	@ (8004180 <TIM_OC2_SetConfig+0x104>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d00b      	beq.n	800412c <TIM_OC2_SetConfig+0xb0>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a1b      	ldr	r2, [pc, #108]	@ (8004184 <TIM_OC2_SetConfig+0x108>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d007      	beq.n	800412c <TIM_OC2_SetConfig+0xb0>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a1a      	ldr	r2, [pc, #104]	@ (8004188 <TIM_OC2_SetConfig+0x10c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d003      	beq.n	800412c <TIM_OC2_SetConfig+0xb0>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a19      	ldr	r2, [pc, #100]	@ (800418c <TIM_OC2_SetConfig+0x110>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d113      	bne.n	8004154 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004132:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800413a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	4313      	orrs	r3, r2
 8004146:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	4313      	orrs	r3, r2
 8004152:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	621a      	str	r2, [r3, #32]
}
 800416e:	bf00      	nop
 8004170:	371c      	adds	r7, #28
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	40012c00 	.word	0x40012c00
 8004180:	40013400 	.word	0x40013400
 8004184:	40014000 	.word	0x40014000
 8004188:	40014400 	.word	0x40014400
 800418c:	40014800 	.word	0x40014800

08004190 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004190:	b480      	push	{r7}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f023 0303 	bic.w	r3, r3, #3
 80041ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	021b      	lsls	r3, r3, #8
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a27      	ldr	r2, [pc, #156]	@ (800428c <TIM_OC3_SetConfig+0xfc>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d003      	beq.n	80041fa <TIM_OC3_SetConfig+0x6a>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a26      	ldr	r2, [pc, #152]	@ (8004290 <TIM_OC3_SetConfig+0x100>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d10d      	bne.n	8004216 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004200:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	021b      	lsls	r3, r3, #8
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	4313      	orrs	r3, r2
 800420c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004214:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a1c      	ldr	r2, [pc, #112]	@ (800428c <TIM_OC3_SetConfig+0xfc>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d00f      	beq.n	800423e <TIM_OC3_SetConfig+0xae>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a1b      	ldr	r2, [pc, #108]	@ (8004290 <TIM_OC3_SetConfig+0x100>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d00b      	beq.n	800423e <TIM_OC3_SetConfig+0xae>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a1a      	ldr	r2, [pc, #104]	@ (8004294 <TIM_OC3_SetConfig+0x104>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d007      	beq.n	800423e <TIM_OC3_SetConfig+0xae>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a19      	ldr	r2, [pc, #100]	@ (8004298 <TIM_OC3_SetConfig+0x108>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d003      	beq.n	800423e <TIM_OC3_SetConfig+0xae>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a18      	ldr	r2, [pc, #96]	@ (800429c <TIM_OC3_SetConfig+0x10c>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d113      	bne.n	8004266 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004244:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800424c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	011b      	lsls	r3, r3, #4
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	4313      	orrs	r3, r2
 8004258:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	011b      	lsls	r3, r3, #4
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	4313      	orrs	r3, r2
 8004264:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	621a      	str	r2, [r3, #32]
}
 8004280:	bf00      	nop
 8004282:	371c      	adds	r7, #28
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	40012c00 	.word	0x40012c00
 8004290:	40013400 	.word	0x40013400
 8004294:	40014000 	.word	0x40014000
 8004298:	40014400 	.word	0x40014400
 800429c:	40014800 	.word	0x40014800

080042a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b087      	sub	sp, #28
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	69db      	ldr	r3, [r3, #28]
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	021b      	lsls	r3, r3, #8
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	031b      	lsls	r3, r3, #12
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a18      	ldr	r2, [pc, #96]	@ (8004360 <TIM_OC4_SetConfig+0xc0>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d00f      	beq.n	8004324 <TIM_OC4_SetConfig+0x84>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a17      	ldr	r2, [pc, #92]	@ (8004364 <TIM_OC4_SetConfig+0xc4>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d00b      	beq.n	8004324 <TIM_OC4_SetConfig+0x84>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a16      	ldr	r2, [pc, #88]	@ (8004368 <TIM_OC4_SetConfig+0xc8>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d007      	beq.n	8004324 <TIM_OC4_SetConfig+0x84>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a15      	ldr	r2, [pc, #84]	@ (800436c <TIM_OC4_SetConfig+0xcc>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d003      	beq.n	8004324 <TIM_OC4_SetConfig+0x84>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a14      	ldr	r2, [pc, #80]	@ (8004370 <TIM_OC4_SetConfig+0xd0>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d109      	bne.n	8004338 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800432a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	019b      	lsls	r3, r3, #6
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	4313      	orrs	r3, r2
 8004336:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	621a      	str	r2, [r3, #32]
}
 8004352:	bf00      	nop
 8004354:	371c      	adds	r7, #28
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	40012c00 	.word	0x40012c00
 8004364:	40013400 	.word	0x40013400
 8004368:	40014000 	.word	0x40014000
 800436c:	40014400 	.word	0x40014400
 8004370:	40014800 	.word	0x40014800

08004374 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004374:	b480      	push	{r7}
 8004376:	b087      	sub	sp, #28
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800439a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80043b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	041b      	lsls	r3, r3, #16
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a17      	ldr	r2, [pc, #92]	@ (8004428 <TIM_OC5_SetConfig+0xb4>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d00f      	beq.n	80043ee <TIM_OC5_SetConfig+0x7a>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a16      	ldr	r2, [pc, #88]	@ (800442c <TIM_OC5_SetConfig+0xb8>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d00b      	beq.n	80043ee <TIM_OC5_SetConfig+0x7a>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a15      	ldr	r2, [pc, #84]	@ (8004430 <TIM_OC5_SetConfig+0xbc>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d007      	beq.n	80043ee <TIM_OC5_SetConfig+0x7a>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a14      	ldr	r2, [pc, #80]	@ (8004434 <TIM_OC5_SetConfig+0xc0>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d003      	beq.n	80043ee <TIM_OC5_SetConfig+0x7a>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a13      	ldr	r2, [pc, #76]	@ (8004438 <TIM_OC5_SetConfig+0xc4>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d109      	bne.n	8004402 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	021b      	lsls	r3, r3, #8
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	4313      	orrs	r3, r2
 8004400:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	621a      	str	r2, [r3, #32]
}
 800441c:	bf00      	nop
 800441e:	371c      	adds	r7, #28
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	40012c00 	.word	0x40012c00
 800442c:	40013400 	.word	0x40013400
 8004430:	40014000 	.word	0x40014000
 8004434:	40014400 	.word	0x40014400
 8004438:	40014800 	.word	0x40014800

0800443c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800446a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800446e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	021b      	lsls	r3, r3, #8
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	4313      	orrs	r3, r2
 800447a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004482:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	051b      	lsls	r3, r3, #20
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	4313      	orrs	r3, r2
 800448e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a18      	ldr	r2, [pc, #96]	@ (80044f4 <TIM_OC6_SetConfig+0xb8>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d00f      	beq.n	80044b8 <TIM_OC6_SetConfig+0x7c>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a17      	ldr	r2, [pc, #92]	@ (80044f8 <TIM_OC6_SetConfig+0xbc>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d00b      	beq.n	80044b8 <TIM_OC6_SetConfig+0x7c>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a16      	ldr	r2, [pc, #88]	@ (80044fc <TIM_OC6_SetConfig+0xc0>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d007      	beq.n	80044b8 <TIM_OC6_SetConfig+0x7c>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a15      	ldr	r2, [pc, #84]	@ (8004500 <TIM_OC6_SetConfig+0xc4>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d003      	beq.n	80044b8 <TIM_OC6_SetConfig+0x7c>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a14      	ldr	r2, [pc, #80]	@ (8004504 <TIM_OC6_SetConfig+0xc8>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d109      	bne.n	80044cc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	029b      	lsls	r3, r3, #10
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	621a      	str	r2, [r3, #32]
}
 80044e6:	bf00      	nop
 80044e8:	371c      	adds	r7, #28
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	40012c00 	.word	0x40012c00
 80044f8:	40013400 	.word	0x40013400
 80044fc:	40014000 	.word	0x40014000
 8004500:	40014400 	.word	0x40014400
 8004504:	40014800 	.word	0x40014800

08004508 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004508:	b480      	push	{r7}
 800450a:	b087      	sub	sp, #28
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	f023 0201 	bic.w	r2, r3, #1
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004532:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	011b      	lsls	r3, r3, #4
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	4313      	orrs	r3, r2
 800453c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f023 030a 	bic.w	r3, r3, #10
 8004544:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	4313      	orrs	r3, r2
 800454c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	621a      	str	r2, [r3, #32]
}
 800455a:	bf00      	nop
 800455c:	371c      	adds	r7, #28
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004566:	b480      	push	{r7}
 8004568:	b087      	sub	sp, #28
 800456a:	af00      	add	r7, sp, #0
 800456c:	60f8      	str	r0, [r7, #12]
 800456e:	60b9      	str	r1, [r7, #8]
 8004570:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	f023 0210 	bic.w	r2, r3, #16
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004590:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	031b      	lsls	r3, r3, #12
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	4313      	orrs	r3, r2
 800459a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80045a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	011b      	lsls	r3, r3, #4
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	621a      	str	r2, [r3, #32]
}
 80045ba:	bf00      	nop
 80045bc:	371c      	adds	r7, #28
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b085      	sub	sp, #20
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
 80045ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	f043 0307 	orr.w	r3, r3, #7
 80045e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	609a      	str	r2, [r3, #8]
}
 80045f0:	bf00      	nop
 80045f2:	3714      	adds	r7, #20
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b087      	sub	sp, #28
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
 8004608:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004616:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	021a      	lsls	r2, r3, #8
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	431a      	orrs	r2, r3
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	4313      	orrs	r3, r2
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	4313      	orrs	r3, r2
 8004628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	609a      	str	r2, [r3, #8]
}
 8004630:	bf00      	nop
 8004632:	371c      	adds	r7, #28
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800463c:	b480      	push	{r7}
 800463e:	b087      	sub	sp, #28
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f003 031f 	and.w	r3, r3, #31
 800464e:	2201      	movs	r2, #1
 8004650:	fa02 f303 	lsl.w	r3, r2, r3
 8004654:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6a1a      	ldr	r2, [r3, #32]
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	43db      	mvns	r3, r3
 800465e:	401a      	ands	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6a1a      	ldr	r2, [r3, #32]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f003 031f 	and.w	r3, r3, #31
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	fa01 f303 	lsl.w	r3, r1, r3
 8004674:	431a      	orrs	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	621a      	str	r2, [r3, #32]
}
 800467a:	bf00      	nop
 800467c:	371c      	adds	r7, #28
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
	...

08004688 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004698:	2b01      	cmp	r3, #1
 800469a:	d101      	bne.n	80046a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800469c:	2302      	movs	r3, #2
 800469e:	e063      	b.n	8004768 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a2b      	ldr	r2, [pc, #172]	@ (8004774 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d004      	beq.n	80046d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a2a      	ldr	r2, [pc, #168]	@ (8004778 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d108      	bne.n	80046e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80046da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a1b      	ldr	r2, [pc, #108]	@ (8004774 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d018      	beq.n	800473c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004712:	d013      	beq.n	800473c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a18      	ldr	r2, [pc, #96]	@ (800477c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d00e      	beq.n	800473c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a17      	ldr	r2, [pc, #92]	@ (8004780 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d009      	beq.n	800473c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a12      	ldr	r2, [pc, #72]	@ (8004778 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d004      	beq.n	800473c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a13      	ldr	r2, [pc, #76]	@ (8004784 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d10c      	bne.n	8004756 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004742:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	4313      	orrs	r3, r2
 800474c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr
 8004774:	40012c00 	.word	0x40012c00
 8004778:	40013400 	.word	0x40013400
 800477c:	40000400 	.word	0x40000400
 8004780:	40000800 	.word	0x40000800
 8004784:	40014000 	.word	0x40014000

08004788 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e040      	b.n	8004858 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d106      	bne.n	80047ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7fc fa88 	bl	8000cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2224      	movs	r2, #36	@ 0x24
 80047f0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 0201 	bic.w	r2, r2, #1
 8004800:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 fbbc 	bl	8004f80 <UART_SetConfig>
 8004808:	4603      	mov	r3, r0
 800480a:	2b01      	cmp	r3, #1
 800480c:	d101      	bne.n	8004812 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e022      	b.n	8004858 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004816:	2b00      	cmp	r3, #0
 8004818:	d002      	beq.n	8004820 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 fd84 	bl	8005328 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800482e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689a      	ldr	r2, [r3, #8]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800483e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0201 	orr.w	r2, r2, #1
 800484e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 fe0b 	bl	800546c <UART_CheckIdleState>
 8004856:	4603      	mov	r3, r0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3708      	adds	r7, #8
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b08a      	sub	sp, #40	@ 0x28
 8004864:	af02      	add	r7, sp, #8
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	603b      	str	r3, [r7, #0]
 800486c:	4613      	mov	r3, r2
 800486e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004874:	2b20      	cmp	r3, #32
 8004876:	d177      	bne.n	8004968 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d002      	beq.n	8004884 <HAL_UART_Transmit+0x24>
 800487e:	88fb      	ldrh	r3, [r7, #6]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e070      	b.n	800496a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2221      	movs	r2, #33	@ 0x21
 8004894:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004896:	f7fc fb9b 	bl	8000fd0 <HAL_GetTick>
 800489a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	88fa      	ldrh	r2, [r7, #6]
 80048a0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	88fa      	ldrh	r2, [r7, #6]
 80048a8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048b4:	d108      	bne.n	80048c8 <HAL_UART_Transmit+0x68>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d104      	bne.n	80048c8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80048be:	2300      	movs	r3, #0
 80048c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	61bb      	str	r3, [r7, #24]
 80048c6:	e003      	b.n	80048d0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048cc:	2300      	movs	r3, #0
 80048ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048d0:	e02f      	b.n	8004932 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	2200      	movs	r2, #0
 80048da:	2180      	movs	r1, #128	@ 0x80
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 fe6d 	bl	80055bc <UART_WaitOnFlagUntilTimeout>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d004      	beq.n	80048f2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2220      	movs	r2, #32
 80048ec:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e03b      	b.n	800496a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10b      	bne.n	8004910 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	881a      	ldrh	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004904:	b292      	uxth	r2, r2
 8004906:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	3302      	adds	r3, #2
 800490c:	61bb      	str	r3, [r7, #24]
 800490e:	e007      	b.n	8004920 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	781a      	ldrb	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	3301      	adds	r3, #1
 800491e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004926:	b29b      	uxth	r3, r3
 8004928:	3b01      	subs	r3, #1
 800492a:	b29a      	uxth	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004938:	b29b      	uxth	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1c9      	bne.n	80048d2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2200      	movs	r2, #0
 8004946:	2140      	movs	r1, #64	@ 0x40
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 fe37 	bl	80055bc <UART_WaitOnFlagUntilTimeout>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d004      	beq.n	800495e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2220      	movs	r2, #32
 8004958:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e005      	b.n	800496a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2220      	movs	r2, #32
 8004962:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004964:	2300      	movs	r3, #0
 8004966:	e000      	b.n	800496a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004968:	2302      	movs	r3, #2
  }
}
 800496a:	4618      	mov	r0, r3
 800496c:	3720      	adds	r7, #32
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
	...

08004974 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b0ba      	sub	sp, #232	@ 0xe8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800499a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800499e:	f640 030f 	movw	r3, #2063	@ 0x80f
 80049a2:	4013      	ands	r3, r2
 80049a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80049a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d115      	bne.n	80049dc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80049b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049b4:	f003 0320 	and.w	r3, r3, #32
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00f      	beq.n	80049dc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80049bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049c0:	f003 0320 	and.w	r3, r3, #32
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d009      	beq.n	80049dc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 82ab 	beq.w	8004f28 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	4798      	blx	r3
      }
      return;
 80049da:	e2a5      	b.n	8004f28 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80049dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f000 8117 	beq.w	8004c14 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80049e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d106      	bne.n	8004a00 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80049f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80049f6:	4b85      	ldr	r3, [pc, #532]	@ (8004c0c <HAL_UART_IRQHandler+0x298>)
 80049f8:	4013      	ands	r3, r2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 810a 	beq.w	8004c14 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d011      	beq.n	8004a30 <HAL_UART_IRQHandler+0xbc>
 8004a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00b      	beq.n	8004a30 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a26:	f043 0201 	orr.w	r2, r3, #1
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d011      	beq.n	8004a60 <HAL_UART_IRQHandler+0xec>
 8004a3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a40:	f003 0301 	and.w	r3, r3, #1
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00b      	beq.n	8004a60 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2202      	movs	r2, #2
 8004a4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a56:	f043 0204 	orr.w	r2, r3, #4
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a64:	f003 0304 	and.w	r3, r3, #4
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d011      	beq.n	8004a90 <HAL_UART_IRQHandler+0x11c>
 8004a6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00b      	beq.n	8004a90 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2204      	movs	r2, #4
 8004a7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a86:	f043 0202 	orr.w	r2, r3, #2
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a94:	f003 0308 	and.w	r3, r3, #8
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d017      	beq.n	8004acc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d105      	bne.n	8004ab4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004aa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004aac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00b      	beq.n	8004acc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2208      	movs	r2, #8
 8004aba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ac2:	f043 0208 	orr.w	r2, r3, #8
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ad0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d012      	beq.n	8004afe <HAL_UART_IRQHandler+0x18a>
 8004ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004adc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00c      	beq.n	8004afe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004aec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004af4:	f043 0220 	orr.w	r2, r3, #32
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f000 8211 	beq.w	8004f2c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b0e:	f003 0320 	and.w	r3, r3, #32
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00d      	beq.n	8004b32 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b1a:	f003 0320 	and.w	r3, r3, #32
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d007      	beq.n	8004b32 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b38:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b46:	2b40      	cmp	r3, #64	@ 0x40
 8004b48:	d005      	beq.n	8004b56 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b4e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d04f      	beq.n	8004bf6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 fd97 	bl	800568a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b66:	2b40      	cmp	r3, #64	@ 0x40
 8004b68:	d141      	bne.n	8004bee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	3308      	adds	r3, #8
 8004b70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004b78:	e853 3f00 	ldrex	r3, [r3]
 8004b7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004b80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	3308      	adds	r3, #8
 8004b92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004b96:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004b9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004ba2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004ba6:	e841 2300 	strex	r3, r2, [r1]
 8004baa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004bae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1d9      	bne.n	8004b6a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d013      	beq.n	8004be6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bc2:	4a13      	ldr	r2, [pc, #76]	@ (8004c10 <HAL_UART_IRQHandler+0x29c>)
 8004bc4:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fc fb56 	bl	800127c <HAL_DMA_Abort_IT>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d017      	beq.n	8004c06 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004be0:	4610      	mov	r0, r2
 8004be2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004be4:	e00f      	b.n	8004c06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f9b4 	bl	8004f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bec:	e00b      	b.n	8004c06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f9b0 	bl	8004f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bf4:	e007      	b.n	8004c06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f9ac 	bl	8004f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004c04:	e192      	b.n	8004f2c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c06:	bf00      	nop
    return;
 8004c08:	e190      	b.n	8004f2c <HAL_UART_IRQHandler+0x5b8>
 8004c0a:	bf00      	nop
 8004c0c:	04000120 	.word	0x04000120
 8004c10:	08005753 	.word	0x08005753

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	f040 814b 	bne.w	8004eb4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c22:	f003 0310 	and.w	r3, r3, #16
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f000 8144 	beq.w	8004eb4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c30:	f003 0310 	and.w	r3, r3, #16
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 813d 	beq.w	8004eb4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2210      	movs	r2, #16
 8004c40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c4c:	2b40      	cmp	r3, #64	@ 0x40
 8004c4e:	f040 80b5 	bne.w	8004dbc <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c5e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 8164 	beq.w	8004f30 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004c6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c72:	429a      	cmp	r2, r3
 8004c74:	f080 815c 	bcs.w	8004f30 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c7e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	2b20      	cmp	r3, #32
 8004c8a:	f000 8086 	beq.w	8004d9a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c96:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004c9a:	e853 3f00 	ldrex	r3, [r3]
 8004c9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004ca2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ca6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004caa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004cb8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004cbc:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004cc4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004cc8:	e841 2300 	strex	r3, r2, [r1]
 8004ccc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004cd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1da      	bne.n	8004c8e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	3308      	adds	r3, #8
 8004cde:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ce2:	e853 3f00 	ldrex	r3, [r3]
 8004ce6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004ce8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004cea:	f023 0301 	bic.w	r3, r3, #1
 8004cee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	3308      	adds	r3, #8
 8004cf8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004cfc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004d00:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d02:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004d04:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004d08:	e841 2300 	strex	r3, r2, [r1]
 8004d0c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004d0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1e1      	bne.n	8004cd8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3308      	adds	r3, #8
 8004d1a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d1e:	e853 3f00 	ldrex	r3, [r3]
 8004d22:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004d24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	3308      	adds	r3, #8
 8004d34:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004d38:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004d3a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004d3e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004d40:	e841 2300 	strex	r3, r2, [r1]
 8004d44:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004d46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1e3      	bne.n	8004d14 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d62:	e853 3f00 	ldrex	r3, [r3]
 8004d66:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004d68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d6a:	f023 0310 	bic.w	r3, r3, #16
 8004d6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	461a      	mov	r2, r3
 8004d78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d7e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d80:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d82:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d84:	e841 2300 	strex	r3, r2, [r1]
 8004d88:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004d8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1e4      	bne.n	8004d5a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7fc fa38 	bl	800120a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2202      	movs	r2, #2
 8004d9e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	4619      	mov	r1, r3
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f8d7 	bl	8004f68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004dba:	e0b9      	b.n	8004f30 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f000 80ab 	beq.w	8004f34 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004dde:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f000 80a6 	beq.w	8004f34 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004df0:	e853 3f00 	ldrex	r3, [r3]
 8004df4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004df8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dfc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	461a      	mov	r2, r3
 8004e06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004e0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e0c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e12:	e841 2300 	strex	r3, r2, [r1]
 8004e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1e4      	bne.n	8004de8 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	3308      	adds	r3, #8
 8004e24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e28:	e853 3f00 	ldrex	r3, [r3]
 8004e2c:	623b      	str	r3, [r7, #32]
   return(result);
 8004e2e:	6a3b      	ldr	r3, [r7, #32]
 8004e30:	f023 0301 	bic.w	r3, r3, #1
 8004e34:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	3308      	adds	r3, #8
 8004e3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004e42:	633a      	str	r2, [r7, #48]	@ 0x30
 8004e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e4a:	e841 2300 	strex	r3, r2, [r1]
 8004e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1e3      	bne.n	8004e1e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2220      	movs	r2, #32
 8004e5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	e853 3f00 	ldrex	r3, [r3]
 8004e76:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f023 0310 	bic.w	r3, r3, #16
 8004e7e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	461a      	mov	r2, r3
 8004e88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e8c:	61fb      	str	r3, [r7, #28]
 8004e8e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e90:	69b9      	ldr	r1, [r7, #24]
 8004e92:	69fa      	ldr	r2, [r7, #28]
 8004e94:	e841 2300 	strex	r3, r2, [r1]
 8004e98:	617b      	str	r3, [r7, #20]
   return(result);
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1e4      	bne.n	8004e6a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ea6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004eaa:	4619      	mov	r1, r3
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f85b 	bl	8004f68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004eb2:	e03f      	b.n	8004f34 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00e      	beq.n	8004ede <HAL_UART_IRQHandler+0x56a>
 8004ec0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ec4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d008      	beq.n	8004ede <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004ed4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 fc7b 	bl	80057d2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004edc:	e02d      	b.n	8004f3a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00e      	beq.n	8004f08 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d008      	beq.n	8004f08 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d01c      	beq.n	8004f38 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	4798      	blx	r3
    }
    return;
 8004f06:	e017      	b.n	8004f38 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d012      	beq.n	8004f3a <HAL_UART_IRQHandler+0x5c6>
 8004f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00c      	beq.n	8004f3a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 fc2c 	bl	800577e <UART_EndTransmit_IT>
    return;
 8004f26:	e008      	b.n	8004f3a <HAL_UART_IRQHandler+0x5c6>
      return;
 8004f28:	bf00      	nop
 8004f2a:	e006      	b.n	8004f3a <HAL_UART_IRQHandler+0x5c6>
    return;
 8004f2c:	bf00      	nop
 8004f2e:	e004      	b.n	8004f3a <HAL_UART_IRQHandler+0x5c6>
      return;
 8004f30:	bf00      	nop
 8004f32:	e002      	b.n	8004f3a <HAL_UART_IRQHandler+0x5c6>
      return;
 8004f34:	bf00      	nop
 8004f36:	e000      	b.n	8004f3a <HAL_UART_IRQHandler+0x5c6>
    return;
 8004f38:	bf00      	nop
  }

}
 8004f3a:	37e8      	adds	r7, #232	@ 0xe8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	460b      	mov	r3, r1
 8004f72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b088      	sub	sp, #32
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	431a      	orrs	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8004fae:	f023 030c 	bic.w	r3, r3, #12
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	6812      	ldr	r2, [r2, #0]
 8004fb6:	6979      	ldr	r1, [r7, #20]
 8004fb8:	430b      	orrs	r3, r1
 8004fba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68da      	ldr	r2, [r3, #12]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4aa7      	ldr	r2, [pc, #668]	@ (8005298 <UART_SetConfig+0x318>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d120      	bne.n	8005042 <UART_SetConfig+0xc2>
 8005000:	4ba6      	ldr	r3, [pc, #664]	@ (800529c <UART_SetConfig+0x31c>)
 8005002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005004:	f003 0303 	and.w	r3, r3, #3
 8005008:	2b03      	cmp	r3, #3
 800500a:	d817      	bhi.n	800503c <UART_SetConfig+0xbc>
 800500c:	a201      	add	r2, pc, #4	@ (adr r2, 8005014 <UART_SetConfig+0x94>)
 800500e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005012:	bf00      	nop
 8005014:	08005025 	.word	0x08005025
 8005018:	08005031 	.word	0x08005031
 800501c:	08005037 	.word	0x08005037
 8005020:	0800502b 	.word	0x0800502b
 8005024:	2301      	movs	r3, #1
 8005026:	77fb      	strb	r3, [r7, #31]
 8005028:	e0b5      	b.n	8005196 <UART_SetConfig+0x216>
 800502a:	2302      	movs	r3, #2
 800502c:	77fb      	strb	r3, [r7, #31]
 800502e:	e0b2      	b.n	8005196 <UART_SetConfig+0x216>
 8005030:	2304      	movs	r3, #4
 8005032:	77fb      	strb	r3, [r7, #31]
 8005034:	e0af      	b.n	8005196 <UART_SetConfig+0x216>
 8005036:	2308      	movs	r3, #8
 8005038:	77fb      	strb	r3, [r7, #31]
 800503a:	e0ac      	b.n	8005196 <UART_SetConfig+0x216>
 800503c:	2310      	movs	r3, #16
 800503e:	77fb      	strb	r3, [r7, #31]
 8005040:	e0a9      	b.n	8005196 <UART_SetConfig+0x216>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a96      	ldr	r2, [pc, #600]	@ (80052a0 <UART_SetConfig+0x320>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d124      	bne.n	8005096 <UART_SetConfig+0x116>
 800504c:	4b93      	ldr	r3, [pc, #588]	@ (800529c <UART_SetConfig+0x31c>)
 800504e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005050:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005054:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005058:	d011      	beq.n	800507e <UART_SetConfig+0xfe>
 800505a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800505e:	d817      	bhi.n	8005090 <UART_SetConfig+0x110>
 8005060:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005064:	d011      	beq.n	800508a <UART_SetConfig+0x10a>
 8005066:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800506a:	d811      	bhi.n	8005090 <UART_SetConfig+0x110>
 800506c:	2b00      	cmp	r3, #0
 800506e:	d003      	beq.n	8005078 <UART_SetConfig+0xf8>
 8005070:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005074:	d006      	beq.n	8005084 <UART_SetConfig+0x104>
 8005076:	e00b      	b.n	8005090 <UART_SetConfig+0x110>
 8005078:	2300      	movs	r3, #0
 800507a:	77fb      	strb	r3, [r7, #31]
 800507c:	e08b      	b.n	8005196 <UART_SetConfig+0x216>
 800507e:	2302      	movs	r3, #2
 8005080:	77fb      	strb	r3, [r7, #31]
 8005082:	e088      	b.n	8005196 <UART_SetConfig+0x216>
 8005084:	2304      	movs	r3, #4
 8005086:	77fb      	strb	r3, [r7, #31]
 8005088:	e085      	b.n	8005196 <UART_SetConfig+0x216>
 800508a:	2308      	movs	r3, #8
 800508c:	77fb      	strb	r3, [r7, #31]
 800508e:	e082      	b.n	8005196 <UART_SetConfig+0x216>
 8005090:	2310      	movs	r3, #16
 8005092:	77fb      	strb	r3, [r7, #31]
 8005094:	e07f      	b.n	8005196 <UART_SetConfig+0x216>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a82      	ldr	r2, [pc, #520]	@ (80052a4 <UART_SetConfig+0x324>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d124      	bne.n	80050ea <UART_SetConfig+0x16a>
 80050a0:	4b7e      	ldr	r3, [pc, #504]	@ (800529c <UART_SetConfig+0x31c>)
 80050a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80050a8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80050ac:	d011      	beq.n	80050d2 <UART_SetConfig+0x152>
 80050ae:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80050b2:	d817      	bhi.n	80050e4 <UART_SetConfig+0x164>
 80050b4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80050b8:	d011      	beq.n	80050de <UART_SetConfig+0x15e>
 80050ba:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80050be:	d811      	bhi.n	80050e4 <UART_SetConfig+0x164>
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d003      	beq.n	80050cc <UART_SetConfig+0x14c>
 80050c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80050c8:	d006      	beq.n	80050d8 <UART_SetConfig+0x158>
 80050ca:	e00b      	b.n	80050e4 <UART_SetConfig+0x164>
 80050cc:	2300      	movs	r3, #0
 80050ce:	77fb      	strb	r3, [r7, #31]
 80050d0:	e061      	b.n	8005196 <UART_SetConfig+0x216>
 80050d2:	2302      	movs	r3, #2
 80050d4:	77fb      	strb	r3, [r7, #31]
 80050d6:	e05e      	b.n	8005196 <UART_SetConfig+0x216>
 80050d8:	2304      	movs	r3, #4
 80050da:	77fb      	strb	r3, [r7, #31]
 80050dc:	e05b      	b.n	8005196 <UART_SetConfig+0x216>
 80050de:	2308      	movs	r3, #8
 80050e0:	77fb      	strb	r3, [r7, #31]
 80050e2:	e058      	b.n	8005196 <UART_SetConfig+0x216>
 80050e4:	2310      	movs	r3, #16
 80050e6:	77fb      	strb	r3, [r7, #31]
 80050e8:	e055      	b.n	8005196 <UART_SetConfig+0x216>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a6e      	ldr	r2, [pc, #440]	@ (80052a8 <UART_SetConfig+0x328>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d124      	bne.n	800513e <UART_SetConfig+0x1be>
 80050f4:	4b69      	ldr	r3, [pc, #420]	@ (800529c <UART_SetConfig+0x31c>)
 80050f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050f8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80050fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005100:	d011      	beq.n	8005126 <UART_SetConfig+0x1a6>
 8005102:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005106:	d817      	bhi.n	8005138 <UART_SetConfig+0x1b8>
 8005108:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800510c:	d011      	beq.n	8005132 <UART_SetConfig+0x1b2>
 800510e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005112:	d811      	bhi.n	8005138 <UART_SetConfig+0x1b8>
 8005114:	2b00      	cmp	r3, #0
 8005116:	d003      	beq.n	8005120 <UART_SetConfig+0x1a0>
 8005118:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800511c:	d006      	beq.n	800512c <UART_SetConfig+0x1ac>
 800511e:	e00b      	b.n	8005138 <UART_SetConfig+0x1b8>
 8005120:	2300      	movs	r3, #0
 8005122:	77fb      	strb	r3, [r7, #31]
 8005124:	e037      	b.n	8005196 <UART_SetConfig+0x216>
 8005126:	2302      	movs	r3, #2
 8005128:	77fb      	strb	r3, [r7, #31]
 800512a:	e034      	b.n	8005196 <UART_SetConfig+0x216>
 800512c:	2304      	movs	r3, #4
 800512e:	77fb      	strb	r3, [r7, #31]
 8005130:	e031      	b.n	8005196 <UART_SetConfig+0x216>
 8005132:	2308      	movs	r3, #8
 8005134:	77fb      	strb	r3, [r7, #31]
 8005136:	e02e      	b.n	8005196 <UART_SetConfig+0x216>
 8005138:	2310      	movs	r3, #16
 800513a:	77fb      	strb	r3, [r7, #31]
 800513c:	e02b      	b.n	8005196 <UART_SetConfig+0x216>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a5a      	ldr	r2, [pc, #360]	@ (80052ac <UART_SetConfig+0x32c>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d124      	bne.n	8005192 <UART_SetConfig+0x212>
 8005148:	4b54      	ldr	r3, [pc, #336]	@ (800529c <UART_SetConfig+0x31c>)
 800514a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800514c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005150:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005154:	d011      	beq.n	800517a <UART_SetConfig+0x1fa>
 8005156:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800515a:	d817      	bhi.n	800518c <UART_SetConfig+0x20c>
 800515c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005160:	d011      	beq.n	8005186 <UART_SetConfig+0x206>
 8005162:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005166:	d811      	bhi.n	800518c <UART_SetConfig+0x20c>
 8005168:	2b00      	cmp	r3, #0
 800516a:	d003      	beq.n	8005174 <UART_SetConfig+0x1f4>
 800516c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005170:	d006      	beq.n	8005180 <UART_SetConfig+0x200>
 8005172:	e00b      	b.n	800518c <UART_SetConfig+0x20c>
 8005174:	2300      	movs	r3, #0
 8005176:	77fb      	strb	r3, [r7, #31]
 8005178:	e00d      	b.n	8005196 <UART_SetConfig+0x216>
 800517a:	2302      	movs	r3, #2
 800517c:	77fb      	strb	r3, [r7, #31]
 800517e:	e00a      	b.n	8005196 <UART_SetConfig+0x216>
 8005180:	2304      	movs	r3, #4
 8005182:	77fb      	strb	r3, [r7, #31]
 8005184:	e007      	b.n	8005196 <UART_SetConfig+0x216>
 8005186:	2308      	movs	r3, #8
 8005188:	77fb      	strb	r3, [r7, #31]
 800518a:	e004      	b.n	8005196 <UART_SetConfig+0x216>
 800518c:	2310      	movs	r3, #16
 800518e:	77fb      	strb	r3, [r7, #31]
 8005190:	e001      	b.n	8005196 <UART_SetConfig+0x216>
 8005192:	2310      	movs	r3, #16
 8005194:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800519e:	d15b      	bne.n	8005258 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80051a0:	7ffb      	ldrb	r3, [r7, #31]
 80051a2:	2b08      	cmp	r3, #8
 80051a4:	d827      	bhi.n	80051f6 <UART_SetConfig+0x276>
 80051a6:	a201      	add	r2, pc, #4	@ (adr r2, 80051ac <UART_SetConfig+0x22c>)
 80051a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ac:	080051d1 	.word	0x080051d1
 80051b0:	080051d9 	.word	0x080051d9
 80051b4:	080051e1 	.word	0x080051e1
 80051b8:	080051f7 	.word	0x080051f7
 80051bc:	080051e7 	.word	0x080051e7
 80051c0:	080051f7 	.word	0x080051f7
 80051c4:	080051f7 	.word	0x080051f7
 80051c8:	080051f7 	.word	0x080051f7
 80051cc:	080051ef 	.word	0x080051ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051d0:	f7fd fe4c 	bl	8002e6c <HAL_RCC_GetPCLK1Freq>
 80051d4:	61b8      	str	r0, [r7, #24]
        break;
 80051d6:	e013      	b.n	8005200 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051d8:	f7fd fe6a 	bl	8002eb0 <HAL_RCC_GetPCLK2Freq>
 80051dc:	61b8      	str	r0, [r7, #24]
        break;
 80051de:	e00f      	b.n	8005200 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051e0:	4b33      	ldr	r3, [pc, #204]	@ (80052b0 <UART_SetConfig+0x330>)
 80051e2:	61bb      	str	r3, [r7, #24]
        break;
 80051e4:	e00c      	b.n	8005200 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051e6:	f7fd fdcb 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 80051ea:	61b8      	str	r0, [r7, #24]
        break;
 80051ec:	e008      	b.n	8005200 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051f2:	61bb      	str	r3, [r7, #24]
        break;
 80051f4:	e004      	b.n	8005200 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	77bb      	strb	r3, [r7, #30]
        break;
 80051fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	2b00      	cmp	r3, #0
 8005204:	f000 8082 	beq.w	800530c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	005a      	lsls	r2, r3, #1
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	085b      	lsrs	r3, r3, #1
 8005212:	441a      	add	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	fbb2 f3f3 	udiv	r3, r2, r3
 800521c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	2b0f      	cmp	r3, #15
 8005222:	d916      	bls.n	8005252 <UART_SetConfig+0x2d2>
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800522a:	d212      	bcs.n	8005252 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	b29b      	uxth	r3, r3
 8005230:	f023 030f 	bic.w	r3, r3, #15
 8005234:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	085b      	lsrs	r3, r3, #1
 800523a:	b29b      	uxth	r3, r3
 800523c:	f003 0307 	and.w	r3, r3, #7
 8005240:	b29a      	uxth	r2, r3
 8005242:	89fb      	ldrh	r3, [r7, #14]
 8005244:	4313      	orrs	r3, r2
 8005246:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	89fa      	ldrh	r2, [r7, #14]
 800524e:	60da      	str	r2, [r3, #12]
 8005250:	e05c      	b.n	800530c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	77bb      	strb	r3, [r7, #30]
 8005256:	e059      	b.n	800530c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005258:	7ffb      	ldrb	r3, [r7, #31]
 800525a:	2b08      	cmp	r3, #8
 800525c:	d835      	bhi.n	80052ca <UART_SetConfig+0x34a>
 800525e:	a201      	add	r2, pc, #4	@ (adr r2, 8005264 <UART_SetConfig+0x2e4>)
 8005260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005264:	08005289 	.word	0x08005289
 8005268:	08005291 	.word	0x08005291
 800526c:	080052b5 	.word	0x080052b5
 8005270:	080052cb 	.word	0x080052cb
 8005274:	080052bb 	.word	0x080052bb
 8005278:	080052cb 	.word	0x080052cb
 800527c:	080052cb 	.word	0x080052cb
 8005280:	080052cb 	.word	0x080052cb
 8005284:	080052c3 	.word	0x080052c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005288:	f7fd fdf0 	bl	8002e6c <HAL_RCC_GetPCLK1Freq>
 800528c:	61b8      	str	r0, [r7, #24]
        break;
 800528e:	e021      	b.n	80052d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005290:	f7fd fe0e 	bl	8002eb0 <HAL_RCC_GetPCLK2Freq>
 8005294:	61b8      	str	r0, [r7, #24]
        break;
 8005296:	e01d      	b.n	80052d4 <UART_SetConfig+0x354>
 8005298:	40013800 	.word	0x40013800
 800529c:	40021000 	.word	0x40021000
 80052a0:	40004400 	.word	0x40004400
 80052a4:	40004800 	.word	0x40004800
 80052a8:	40004c00 	.word	0x40004c00
 80052ac:	40005000 	.word	0x40005000
 80052b0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005324 <UART_SetConfig+0x3a4>)
 80052b6:	61bb      	str	r3, [r7, #24]
        break;
 80052b8:	e00c      	b.n	80052d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ba:	f7fd fd61 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 80052be:	61b8      	str	r0, [r7, #24]
        break;
 80052c0:	e008      	b.n	80052d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052c6:	61bb      	str	r3, [r7, #24]
        break;
 80052c8:	e004      	b.n	80052d4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	77bb      	strb	r3, [r7, #30]
        break;
 80052d2:	bf00      	nop
    }

    if (pclk != 0U)
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d018      	beq.n	800530c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	085a      	lsrs	r2, r3, #1
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	441a      	add	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	2b0f      	cmp	r3, #15
 80052f2:	d909      	bls.n	8005308 <UART_SetConfig+0x388>
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052fa:	d205      	bcs.n	8005308 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	b29a      	uxth	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	60da      	str	r2, [r3, #12]
 8005306:	e001      	b.n	800530c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005318:	7fbb      	ldrb	r3, [r7, #30]
}
 800531a:	4618      	mov	r0, r3
 800531c:	3720      	adds	r7, #32
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	007a1200 	.word	0x007a1200

08005328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005334:	f003 0301 	and.w	r3, r3, #1
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00a      	beq.n	8005352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	430a      	orrs	r2, r1
 8005350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00a      	beq.n	8005374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	430a      	orrs	r2, r1
 8005372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005378:	f003 0304 	and.w	r3, r3, #4
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00a      	beq.n	8005396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	430a      	orrs	r2, r1
 8005394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800539a:	f003 0308 	and.w	r3, r3, #8
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	430a      	orrs	r2, r1
 80053b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053bc:	f003 0310 	and.w	r3, r3, #16
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00a      	beq.n	80053da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053de:	f003 0320 	and.w	r3, r3, #32
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00a      	beq.n	80053fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	430a      	orrs	r2, r1
 80053fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005404:	2b00      	cmp	r3, #0
 8005406:	d01a      	beq.n	800543e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	430a      	orrs	r2, r1
 800541c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005422:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005426:	d10a      	bne.n	800543e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00a      	beq.n	8005460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	430a      	orrs	r2, r1
 800545e:	605a      	str	r2, [r3, #4]
  }
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b098      	sub	sp, #96	@ 0x60
 8005470:	af02      	add	r7, sp, #8
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800547c:	f7fb fda8 	bl	8000fd0 <HAL_GetTick>
 8005480:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0308 	and.w	r3, r3, #8
 800548c:	2b08      	cmp	r3, #8
 800548e:	d12e      	bne.n	80054ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005490:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005498:	2200      	movs	r2, #0
 800549a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f88c 	bl	80055bc <UART_WaitOnFlagUntilTimeout>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d021      	beq.n	80054ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054b2:	e853 3f00 	ldrex	r3, [r3]
 80054b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054be:	653b      	str	r3, [r7, #80]	@ 0x50
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	461a      	mov	r2, r3
 80054c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80054ca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054d0:	e841 2300 	strex	r3, r2, [r1]
 80054d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1e6      	bne.n	80054aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2220      	movs	r2, #32
 80054e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e062      	b.n	80055b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0304 	and.w	r3, r3, #4
 80054f8:	2b04      	cmp	r3, #4
 80054fa:	d149      	bne.n	8005590 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005504:	2200      	movs	r2, #0
 8005506:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f856 	bl	80055bc <UART_WaitOnFlagUntilTimeout>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d03c      	beq.n	8005590 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551e:	e853 3f00 	ldrex	r3, [r3]
 8005522:	623b      	str	r3, [r7, #32]
   return(result);
 8005524:	6a3b      	ldr	r3, [r7, #32]
 8005526:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800552a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	461a      	mov	r2, r3
 8005532:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005534:	633b      	str	r3, [r7, #48]	@ 0x30
 8005536:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005538:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800553a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800553c:	e841 2300 	strex	r3, r2, [r1]
 8005540:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1e6      	bne.n	8005516 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	3308      	adds	r3, #8
 800554e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	e853 3f00 	ldrex	r3, [r3]
 8005556:	60fb      	str	r3, [r7, #12]
   return(result);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 0301 	bic.w	r3, r3, #1
 800555e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	3308      	adds	r3, #8
 8005566:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005568:	61fa      	str	r2, [r7, #28]
 800556a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556c:	69b9      	ldr	r1, [r7, #24]
 800556e:	69fa      	ldr	r2, [r7, #28]
 8005570:	e841 2300 	strex	r3, r2, [r1]
 8005574:	617b      	str	r3, [r7, #20]
   return(result);
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1e5      	bne.n	8005548 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2220      	movs	r2, #32
 8005580:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e011      	b.n	80055b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2220      	movs	r2, #32
 8005594:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2220      	movs	r2, #32
 800559a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3758      	adds	r7, #88	@ 0x58
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	603b      	str	r3, [r7, #0]
 80055c8:	4613      	mov	r3, r2
 80055ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055cc:	e049      	b.n	8005662 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055d4:	d045      	beq.n	8005662 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055d6:	f7fb fcfb 	bl	8000fd0 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d302      	bcc.n	80055ec <UART_WaitOnFlagUntilTimeout+0x30>
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e048      	b.n	8005682 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0304 	and.w	r3, r3, #4
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d031      	beq.n	8005662 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	69db      	ldr	r3, [r3, #28]
 8005604:	f003 0308 	and.w	r3, r3, #8
 8005608:	2b08      	cmp	r3, #8
 800560a:	d110      	bne.n	800562e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2208      	movs	r2, #8
 8005612:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f000 f838 	bl	800568a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2208      	movs	r2, #8
 800561e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e029      	b.n	8005682 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	69db      	ldr	r3, [r3, #28]
 8005634:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005638:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800563c:	d111      	bne.n	8005662 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005646:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f000 f81e 	bl	800568a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2220      	movs	r2, #32
 8005652:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e00f      	b.n	8005682 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	69da      	ldr	r2, [r3, #28]
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	4013      	ands	r3, r2
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	429a      	cmp	r2, r3
 8005670:	bf0c      	ite	eq
 8005672:	2301      	moveq	r3, #1
 8005674:	2300      	movne	r3, #0
 8005676:	b2db      	uxtb	r3, r3
 8005678:	461a      	mov	r2, r3
 800567a:	79fb      	ldrb	r3, [r7, #7]
 800567c:	429a      	cmp	r2, r3
 800567e:	d0a6      	beq.n	80055ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800568a:	b480      	push	{r7}
 800568c:	b095      	sub	sp, #84	@ 0x54
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800569a:	e853 3f00 	ldrex	r3, [r3]
 800569e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	461a      	mov	r2, r3
 80056ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80056b2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056b8:	e841 2300 	strex	r3, r2, [r1]
 80056bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1e6      	bne.n	8005692 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3308      	adds	r3, #8
 80056ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056cc:	6a3b      	ldr	r3, [r7, #32]
 80056ce:	e853 3f00 	ldrex	r3, [r3]
 80056d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	f023 0301 	bic.w	r3, r3, #1
 80056da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	3308      	adds	r3, #8
 80056e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056ec:	e841 2300 	strex	r3, r2, [r1]
 80056f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80056f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1e5      	bne.n	80056c4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d118      	bne.n	8005732 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	e853 3f00 	ldrex	r3, [r3]
 800570c:	60bb      	str	r3, [r7, #8]
   return(result);
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	f023 0310 	bic.w	r3, r3, #16
 8005714:	647b      	str	r3, [r7, #68]	@ 0x44
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	461a      	mov	r2, r3
 800571c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800571e:	61bb      	str	r3, [r7, #24]
 8005720:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005722:	6979      	ldr	r1, [r7, #20]
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	e841 2300 	strex	r3, r2, [r1]
 800572a:	613b      	str	r3, [r7, #16]
   return(result);
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1e6      	bne.n	8005700 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2220      	movs	r2, #32
 8005736:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005746:	bf00      	nop
 8005748:	3754      	adds	r7, #84	@ 0x54
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr

08005752 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b084      	sub	sp, #16
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800575e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f7ff fbef 	bl	8004f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005776:	bf00      	nop
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b088      	sub	sp, #32
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	e853 3f00 	ldrex	r3, [r3]
 8005792:	60bb      	str	r3, [r7, #8]
   return(result);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800579a:	61fb      	str	r3, [r7, #28]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	461a      	mov	r2, r3
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	61bb      	str	r3, [r7, #24]
 80057a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a8:	6979      	ldr	r1, [r7, #20]
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	e841 2300 	strex	r3, r2, [r1]
 80057b0:	613b      	str	r3, [r7, #16]
   return(result);
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1e6      	bne.n	8005786 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2220      	movs	r2, #32
 80057bc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f7ff fbbb 	bl	8004f40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057ca:	bf00      	nop
 80057cc:	3720      	adds	r7, #32
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b083      	sub	sp, #12
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80057da:	bf00      	nop
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80057e6:	b480      	push	{r7}
 80057e8:	b085      	sub	sp, #20
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80057ee:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80057f2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	b29b      	uxth	r3, r3
 8005800:	43db      	mvns	r3, r3
 8005802:	b29b      	uxth	r3, r3
 8005804:	4013      	ands	r3, r2
 8005806:	b29a      	uxth	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3714      	adds	r7, #20
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800581c:	b084      	sub	sp, #16
 800581e:	b480      	push	{r7}
 8005820:	b083      	sub	sp, #12
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
 8005826:	f107 0014 	add.w	r0, r7, #20
 800582a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2201      	movs	r2, #1
 8005832:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	b004      	add	sp, #16
 800585c:	4770      	bx	lr

0800585e <memset>:
 800585e:	4402      	add	r2, r0
 8005860:	4603      	mov	r3, r0
 8005862:	4293      	cmp	r3, r2
 8005864:	d100      	bne.n	8005868 <memset+0xa>
 8005866:	4770      	bx	lr
 8005868:	f803 1b01 	strb.w	r1, [r3], #1
 800586c:	e7f9      	b.n	8005862 <memset+0x4>
	...

08005870 <__libc_init_array>:
 8005870:	b570      	push	{r4, r5, r6, lr}
 8005872:	4d0d      	ldr	r5, [pc, #52]	@ (80058a8 <__libc_init_array+0x38>)
 8005874:	4c0d      	ldr	r4, [pc, #52]	@ (80058ac <__libc_init_array+0x3c>)
 8005876:	1b64      	subs	r4, r4, r5
 8005878:	10a4      	asrs	r4, r4, #2
 800587a:	2600      	movs	r6, #0
 800587c:	42a6      	cmp	r6, r4
 800587e:	d109      	bne.n	8005894 <__libc_init_array+0x24>
 8005880:	4d0b      	ldr	r5, [pc, #44]	@ (80058b0 <__libc_init_array+0x40>)
 8005882:	4c0c      	ldr	r4, [pc, #48]	@ (80058b4 <__libc_init_array+0x44>)
 8005884:	f000 f818 	bl	80058b8 <_init>
 8005888:	1b64      	subs	r4, r4, r5
 800588a:	10a4      	asrs	r4, r4, #2
 800588c:	2600      	movs	r6, #0
 800588e:	42a6      	cmp	r6, r4
 8005890:	d105      	bne.n	800589e <__libc_init_array+0x2e>
 8005892:	bd70      	pop	{r4, r5, r6, pc}
 8005894:	f855 3b04 	ldr.w	r3, [r5], #4
 8005898:	4798      	blx	r3
 800589a:	3601      	adds	r6, #1
 800589c:	e7ee      	b.n	800587c <__libc_init_array+0xc>
 800589e:	f855 3b04 	ldr.w	r3, [r5], #4
 80058a2:	4798      	blx	r3
 80058a4:	3601      	adds	r6, #1
 80058a6:	e7f2      	b.n	800588e <__libc_init_array+0x1e>
 80058a8:	08005e18 	.word	0x08005e18
 80058ac:	08005e18 	.word	0x08005e18
 80058b0:	08005e18 	.word	0x08005e18
 80058b4:	08005e1c 	.word	0x08005e1c

080058b8 <_init>:
 80058b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ba:	bf00      	nop
 80058bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058be:	bc08      	pop	{r3}
 80058c0:	469e      	mov	lr, r3
 80058c2:	4770      	bx	lr

080058c4 <_fini>:
 80058c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058c6:	bf00      	nop
 80058c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ca:	bc08      	pop	{r3}
 80058cc:	469e      	mov	lr, r3
 80058ce:	4770      	bx	lr
